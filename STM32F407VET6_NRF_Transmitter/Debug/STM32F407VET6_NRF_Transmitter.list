
STM32F407VET6_NRF_Transmitter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000026c4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  0800284c  0800284c  0001284c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800286c  0800286c  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  0800286c  0800286c  0001286c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002874  08002874  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002874  08002874  00012874  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002878  08002878  00012878  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  0800287c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
 10 .bss          0000008c  20000014  20000014  00020014  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000a0  200000a0  00020014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 14 .debug_info   000063ca  00000000  00000000  00020087  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000147d  00000000  00000000  00026451  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000006a0  00000000  00000000  000278d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000004e7  00000000  00000000  00027f70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001f69b  00000000  00000000  00028457  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00006e73  00000000  00000000  00047af2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000be74d  00000000  00000000  0004e965  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000019a4  00000000  00000000  0010d0b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000073  00000000  00000000  0010ea58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002834 	.word	0x08002834

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	08002834 	.word	0x08002834

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <HAL_NRF24_CS_select>:

/*
-Description : SPI Chip Select 
*/
void HAL_NRF24_CS_select(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CSN_GPIO_Port,CSN_Pin,GPIO_PIN_RESET); // Select slave 
 80004c8:	2200      	movs	r2, #0
 80004ca:	2180      	movs	r1, #128	; 0x80
 80004cc:	4802      	ldr	r0, [pc, #8]	; (80004d8 <HAL_NRF24_CS_select+0x14>)
 80004ce:	f000 ff85 	bl	80013dc <HAL_GPIO_WritePin>
}
 80004d2:	bf00      	nop
 80004d4:	bd80      	pop	{r7, pc}
 80004d6:	bf00      	nop
 80004d8:	40020400 	.word	0x40020400

080004dc <HAL_NRF24_CS_unSelect>:

/*
-Description : SPI Chip UnSelect 
*/
void HAL_NRF24_CS_unSelect(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CSN_GPIO_Port,CSN_Pin,GPIO_PIN_SET); // Unselect slave 
 80004e0:	2201      	movs	r2, #1
 80004e2:	2180      	movs	r1, #128	; 0x80
 80004e4:	4802      	ldr	r0, [pc, #8]	; (80004f0 <HAL_NRF24_CS_unSelect+0x14>)
 80004e6:	f000 ff79 	bl	80013dc <HAL_GPIO_WritePin>
}
 80004ea:	bf00      	nop
 80004ec:	bd80      	pop	{r7, pc}
 80004ee:	bf00      	nop
 80004f0:	40020400 	.word	0x40020400

080004f4 <HAL_NRF24_CE_enable>:

/*
-Description : Chip Enable Activates RX or TX mode
*/
void HAL_NRF24_CE_enable(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CE_GPIO_Port,CE_Pin,GPIO_PIN_SET); // Enable NRF
 80004f8:	2201      	movs	r2, #1
 80004fa:	2140      	movs	r1, #64	; 0x40
 80004fc:	4802      	ldr	r0, [pc, #8]	; (8000508 <HAL_NRF24_CE_enable+0x14>)
 80004fe:	f000 ff6d 	bl	80013dc <HAL_GPIO_WritePin>
}
 8000502:	bf00      	nop
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	40020400 	.word	0x40020400

0800050c <HAL_NRF24_CE_disable>:

/*
-Description : Chip Disable  RX or TX mode
*/
void HAL_NRF24_CE_disable(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CE_GPIO_Port,CE_Pin,GPIO_PIN_RESET); // Disable NRF
 8000510:	2200      	movs	r2, #0
 8000512:	2140      	movs	r1, #64	; 0x40
 8000514:	4802      	ldr	r0, [pc, #8]	; (8000520 <HAL_NRF24_CE_disable+0x14>)
 8000516:	f000 ff61 	bl	80013dc <HAL_GPIO_WritePin>
}
 800051a:	bf00      	nop
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	40020400 	.word	0x40020400

08000524 <HAL_NRF24_writeReg>:

/*
-Description : Send byte of data to speicfic register
*/
void HAL_NRF24_writeReg(uint8_t Reg,uint8_t Data)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b084      	sub	sp, #16
 8000528:	af00      	add	r7, sp, #0
 800052a:	4603      	mov	r3, r0
 800052c:	460a      	mov	r2, r1
 800052e:	71fb      	strb	r3, [r7, #7]
 8000530:	4613      	mov	r3, r2
 8000532:	71bb      	strb	r3, [r7, #6]
	uint8_t buffer[2]; // buffer to hold data and register 
	buffer[0] = Reg | (1<<5); 
 8000534:	79fb      	ldrb	r3, [r7, #7]
 8000536:	f043 0320 	orr.w	r3, r3, #32
 800053a:	b2db      	uxtb	r3, r3
 800053c:	733b      	strb	r3, [r7, #12]
	buffer[1] = Data;
 800053e:	79bb      	ldrb	r3, [r7, #6]
 8000540:	737b      	strb	r3, [r7, #13]
	
	//Pull CS low to select slave device 
	HAL_NRF24_CS_select();
 8000542:	f7ff ffbf 	bl	80004c4 <HAL_NRF24_CS_select>
	
	//Transmit Data and Regitser addreses
	HAL_SPI_Transmit(NRF_Handler,buffer,2,1000);
 8000546:	f107 010c 	add.w	r1, r7, #12
 800054a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800054e:	2202      	movs	r2, #2
 8000550:	4804      	ldr	r0, [pc, #16]	; (8000564 <HAL_NRF24_writeReg+0x40>)
 8000552:	f001 fc24 	bl	8001d9e <HAL_SPI_Transmit>
	
	//Pull CS High to realaese slave device
	HAL_NRF24_CS_unSelect();
 8000556:	f7ff ffc1 	bl	80004dc <HAL_NRF24_CS_unSelect>
	
	
}
 800055a:	bf00      	nop
 800055c:	3710      	adds	r7, #16
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	20000030 	.word	0x20000030

08000568 <HAL_NRF24_writeRegMulti>:

/*
-Description : Send multiple byte of data to speicfic register
*/
void HAL_NRF24_writeRegMulti(uint8_t Reg , uint8_t *Data,uint8_t sizeOfData)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b084      	sub	sp, #16
 800056c:	af00      	add	r7, sp, #0
 800056e:	4603      	mov	r3, r0
 8000570:	6039      	str	r1, [r7, #0]
 8000572:	71fb      	strb	r3, [r7, #7]
 8000574:	4613      	mov	r3, r2
 8000576:	71bb      	strb	r3, [r7, #6]
	uint8_t buffer; // buffer to hold data and register 
	buffer = Reg | (1<<5); 
 8000578:	79fb      	ldrb	r3, [r7, #7]
 800057a:	f043 0320 	orr.w	r3, r3, #32
 800057e:	b2db      	uxtb	r3, r3
 8000580:	73fb      	strb	r3, [r7, #15]

	
	//Pull CS low to select slave device 
	HAL_NRF24_CS_select();
 8000582:	f7ff ff9f 	bl	80004c4 <HAL_NRF24_CS_select>
	
	//Transmit Data and Regitser addreses
	HAL_SPI_Transmit(NRF_Handler,&buffer,1,100);
 8000586:	f107 010f 	add.w	r1, r7, #15
 800058a:	2364      	movs	r3, #100	; 0x64
 800058c:	2201      	movs	r2, #1
 800058e:	4808      	ldr	r0, [pc, #32]	; (80005b0 <HAL_NRF24_writeRegMulti+0x48>)
 8000590:	f001 fc05 	bl	8001d9e <HAL_SPI_Transmit>
	HAL_SPI_Transmit(NRF_Handler,Data,sizeOfData,1000);
 8000594:	79bb      	ldrb	r3, [r7, #6]
 8000596:	b29a      	uxth	r2, r3
 8000598:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800059c:	6839      	ldr	r1, [r7, #0]
 800059e:	4804      	ldr	r0, [pc, #16]	; (80005b0 <HAL_NRF24_writeRegMulti+0x48>)
 80005a0:	f001 fbfd 	bl	8001d9e <HAL_SPI_Transmit>
	
	//Pull CS High to realaese slave device
	HAL_NRF24_CS_unSelect();
 80005a4:	f7ff ff9a 	bl	80004dc <HAL_NRF24_CS_unSelect>
	
}
 80005a8:	bf00      	nop
 80005aa:	3710      	adds	r7, #16
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	20000030 	.word	0x20000030

080005b4 <HAL_NRF24_readReg>:

/*
-Description : Read byte of Data from specific Reg
*/
uint8_t HAL_NRF24_readReg(uint8_t Reg)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b084      	sub	sp, #16
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	4603      	mov	r3, r0
 80005bc:	71fb      	strb	r3, [r7, #7]
	uint8_t Data; // Varaible to Hold data
	
	//Pull CS low to select slave device 
	HAL_NRF24_CS_select();
 80005be:	f7ff ff81 	bl	80004c4 <HAL_NRF24_CS_select>
	
	//Recive Data and Regitser addreses
	HAL_SPI_Transmit(NRF_Handler,&Reg,1,100);
 80005c2:	1df9      	adds	r1, r7, #7
 80005c4:	2364      	movs	r3, #100	; 0x64
 80005c6:	2201      	movs	r2, #1
 80005c8:	4808      	ldr	r0, [pc, #32]	; (80005ec <HAL_NRF24_readReg+0x38>)
 80005ca:	f001 fbe8 	bl	8001d9e <HAL_SPI_Transmit>
	HAL_SPI_Receive(NRF_Handler,&Data,1,100);
 80005ce:	f107 010f 	add.w	r1, r7, #15
 80005d2:	2364      	movs	r3, #100	; 0x64
 80005d4:	2201      	movs	r2, #1
 80005d6:	4805      	ldr	r0, [pc, #20]	; (80005ec <HAL_NRF24_readReg+0x38>)
 80005d8:	f001 fd1d 	bl	8002016 <HAL_SPI_Receive>
	
	//Pull CS High to realaese slave device
	HAL_NRF24_CS_unSelect();
 80005dc:	f7ff ff7e 	bl	80004dc <HAL_NRF24_CS_unSelect>
	
	return Data; 
 80005e0:	7bfb      	ldrb	r3, [r7, #15]

}
 80005e2:	4618      	mov	r0, r3
 80005e4:	3710      	adds	r7, #16
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	20000030 	.word	0x20000030

080005f0 <HAL_NRF24_resetRegister>:

/*
-Description : Reset Regitsers values
*/
void HAL_NRF24_resetRegister(uint8_t Reg)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b088      	sub	sp, #32
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	4603      	mov	r3, r0
 80005f8:	71fb      	strb	r3, [r7, #7]
	if (Reg == STATUS_REG)
 80005fa:	79fb      	ldrb	r3, [r7, #7]
 80005fc:	2b07      	cmp	r3, #7
 80005fe:	d104      	bne.n	800060a <HAL_NRF24_resetRegister+0x1a>
	{
		HAL_NRF24_writeReg(STATUS_REG, 0x00);
 8000600:	2100      	movs	r1, #0
 8000602:	2007      	movs	r0, #7
 8000604:	f7ff ff8e 	bl	8000524 <HAL_NRF24_writeReg>
	HAL_NRF24_writeReg(RX_PW_P5_REG, 0);
	HAL_NRF24_writeReg(FIFO_STATUS_REG, 0x11);
	HAL_NRF24_writeReg(DYNPD_REG, 0);
	HAL_NRF24_writeReg(FEATURE_REG, 0);
	}
}
 8000608:	e094      	b.n	8000734 <HAL_NRF24_resetRegister+0x144>
	else if (Reg == FIFO_STATUS_REG)
 800060a:	79fb      	ldrb	r3, [r7, #7]
 800060c:	2b17      	cmp	r3, #23
 800060e:	d104      	bne.n	800061a <HAL_NRF24_resetRegister+0x2a>
		HAL_NRF24_writeReg(FIFO_STATUS_REG, 0x11);
 8000610:	2111      	movs	r1, #17
 8000612:	2017      	movs	r0, #23
 8000614:	f7ff ff86 	bl	8000524 <HAL_NRF24_writeReg>
}
 8000618:	e08c      	b.n	8000734 <HAL_NRF24_resetRegister+0x144>
	else if (Reg == ALL_REG) 
 800061a:	79fb      	ldrb	r3, [r7, #7]
 800061c:	2bff      	cmp	r3, #255	; 0xff
 800061e:	f040 8089 	bne.w	8000734 <HAL_NRF24_resetRegister+0x144>
	HAL_NRF24_writeReg(CONFIG_REG, 0x08);
 8000622:	2108      	movs	r1, #8
 8000624:	2000      	movs	r0, #0
 8000626:	f7ff ff7d 	bl	8000524 <HAL_NRF24_writeReg>
	HAL_NRF24_writeReg(EN_AA_REG, 0x3F);
 800062a:	213f      	movs	r1, #63	; 0x3f
 800062c:	2001      	movs	r0, #1
 800062e:	f7ff ff79 	bl	8000524 <HAL_NRF24_writeReg>
	HAL_NRF24_writeReg(EN_RXADDR_REG, 0x03);
 8000632:	2103      	movs	r1, #3
 8000634:	2002      	movs	r0, #2
 8000636:	f7ff ff75 	bl	8000524 <HAL_NRF24_writeReg>
	HAL_NRF24_writeReg(SETUP_AW_REG, 0x03);
 800063a:	2103      	movs	r1, #3
 800063c:	2003      	movs	r0, #3
 800063e:	f7ff ff71 	bl	8000524 <HAL_NRF24_writeReg>
	HAL_NRF24_writeReg(SETUP_RETR_REG, 0x03);
 8000642:	2103      	movs	r1, #3
 8000644:	2004      	movs	r0, #4
 8000646:	f7ff ff6d 	bl	8000524 <HAL_NRF24_writeReg>
	HAL_NRF24_writeReg(RF_CH_REG, 0x02);
 800064a:	2102      	movs	r1, #2
 800064c:	2005      	movs	r0, #5
 800064e:	f7ff ff69 	bl	8000524 <HAL_NRF24_writeReg>
	HAL_NRF24_writeReg(RF_SETUP_REG, 0x0E);
 8000652:	210e      	movs	r1, #14
 8000654:	2006      	movs	r0, #6
 8000656:	f7ff ff65 	bl	8000524 <HAL_NRF24_writeReg>
	HAL_NRF24_writeReg(STATUS_REG, 0x00);
 800065a:	2100      	movs	r1, #0
 800065c:	2007      	movs	r0, #7
 800065e:	f7ff ff61 	bl	8000524 <HAL_NRF24_writeReg>
	HAL_NRF24_writeReg(OBSERVE_TX_REG, 0x00);
 8000662:	2100      	movs	r1, #0
 8000664:	2008      	movs	r0, #8
 8000666:	f7ff ff5d 	bl	8000524 <HAL_NRF24_writeReg>
	HAL_NRF24_writeReg(CD_REG, 0x00);
 800066a:	2100      	movs	r1, #0
 800066c:	2009      	movs	r0, #9
 800066e:	f7ff ff59 	bl	8000524 <HAL_NRF24_writeReg>
	uint8_t rx_addr_p0_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 8000672:	4a32      	ldr	r2, [pc, #200]	; (800073c <HAL_NRF24_resetRegister+0x14c>)
 8000674:	f107 0318 	add.w	r3, r7, #24
 8000678:	e892 0003 	ldmia.w	r2, {r0, r1}
 800067c:	6018      	str	r0, [r3, #0]
 800067e:	3304      	adds	r3, #4
 8000680:	7019      	strb	r1, [r3, #0]
	HAL_NRF24_writeRegMulti(RX_ADDR_P0_REG, rx_addr_p0_def, 5);
 8000682:	f107 0318 	add.w	r3, r7, #24
 8000686:	2205      	movs	r2, #5
 8000688:	4619      	mov	r1, r3
 800068a:	200a      	movs	r0, #10
 800068c:	f7ff ff6c 	bl	8000568 <HAL_NRF24_writeRegMulti>
	uint8_t rx_addr_p1_def[5] = {0xC2, 0xC2, 0xC2, 0xC2, 0xC2};
 8000690:	4a2b      	ldr	r2, [pc, #172]	; (8000740 <HAL_NRF24_resetRegister+0x150>)
 8000692:	f107 0310 	add.w	r3, r7, #16
 8000696:	e892 0003 	ldmia.w	r2, {r0, r1}
 800069a:	6018      	str	r0, [r3, #0]
 800069c:	3304      	adds	r3, #4
 800069e:	7019      	strb	r1, [r3, #0]
	HAL_NRF24_writeRegMulti(RX_ADDR_P1_REG, rx_addr_p1_def, 5);
 80006a0:	f107 0310 	add.w	r3, r7, #16
 80006a4:	2205      	movs	r2, #5
 80006a6:	4619      	mov	r1, r3
 80006a8:	200b      	movs	r0, #11
 80006aa:	f7ff ff5d 	bl	8000568 <HAL_NRF24_writeRegMulti>
	HAL_NRF24_writeReg(RX_ADDR_P2_REG, 0xC3);
 80006ae:	21c3      	movs	r1, #195	; 0xc3
 80006b0:	200c      	movs	r0, #12
 80006b2:	f7ff ff37 	bl	8000524 <HAL_NRF24_writeReg>
	HAL_NRF24_writeReg(RX_ADDR_P3_REG, 0xC4);
 80006b6:	21c4      	movs	r1, #196	; 0xc4
 80006b8:	200d      	movs	r0, #13
 80006ba:	f7ff ff33 	bl	8000524 <HAL_NRF24_writeReg>
	HAL_NRF24_writeReg(RX_ADDR_P4_REG, 0xC5);
 80006be:	21c5      	movs	r1, #197	; 0xc5
 80006c0:	200e      	movs	r0, #14
 80006c2:	f7ff ff2f 	bl	8000524 <HAL_NRF24_writeReg>
	HAL_NRF24_writeReg(RX_ADDR_P5_REG, 0xC6);
 80006c6:	21c6      	movs	r1, #198	; 0xc6
 80006c8:	200f      	movs	r0, #15
 80006ca:	f7ff ff2b 	bl	8000524 <HAL_NRF24_writeReg>
	uint8_t tx_addr_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 80006ce:	4a1b      	ldr	r2, [pc, #108]	; (800073c <HAL_NRF24_resetRegister+0x14c>)
 80006d0:	f107 0308 	add.w	r3, r7, #8
 80006d4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006d8:	6018      	str	r0, [r3, #0]
 80006da:	3304      	adds	r3, #4
 80006dc:	7019      	strb	r1, [r3, #0]
	HAL_NRF24_writeRegMulti(TX_ADDR_REG, tx_addr_def, 5);
 80006de:	f107 0308 	add.w	r3, r7, #8
 80006e2:	2205      	movs	r2, #5
 80006e4:	4619      	mov	r1, r3
 80006e6:	2010      	movs	r0, #16
 80006e8:	f7ff ff3e 	bl	8000568 <HAL_NRF24_writeRegMulti>
	HAL_NRF24_writeReg(RX_PW_P0_REG, 0);
 80006ec:	2100      	movs	r1, #0
 80006ee:	2011      	movs	r0, #17
 80006f0:	f7ff ff18 	bl	8000524 <HAL_NRF24_writeReg>
	HAL_NRF24_writeReg(RX_PW_P1_REG, 0);
 80006f4:	2100      	movs	r1, #0
 80006f6:	2012      	movs	r0, #18
 80006f8:	f7ff ff14 	bl	8000524 <HAL_NRF24_writeReg>
	HAL_NRF24_writeReg(RX_PW_P2_REG, 0);
 80006fc:	2100      	movs	r1, #0
 80006fe:	2013      	movs	r0, #19
 8000700:	f7ff ff10 	bl	8000524 <HAL_NRF24_writeReg>
	HAL_NRF24_writeReg(RX_PW_P3_REG, 0);
 8000704:	2100      	movs	r1, #0
 8000706:	2014      	movs	r0, #20
 8000708:	f7ff ff0c 	bl	8000524 <HAL_NRF24_writeReg>
	HAL_NRF24_writeReg(RX_PW_P4_REG, 0);
 800070c:	2100      	movs	r1, #0
 800070e:	2015      	movs	r0, #21
 8000710:	f7ff ff08 	bl	8000524 <HAL_NRF24_writeReg>
	HAL_NRF24_writeReg(RX_PW_P5_REG, 0);
 8000714:	2100      	movs	r1, #0
 8000716:	2016      	movs	r0, #22
 8000718:	f7ff ff04 	bl	8000524 <HAL_NRF24_writeReg>
	HAL_NRF24_writeReg(FIFO_STATUS_REG, 0x11);
 800071c:	2111      	movs	r1, #17
 800071e:	2017      	movs	r0, #23
 8000720:	f7ff ff00 	bl	8000524 <HAL_NRF24_writeReg>
	HAL_NRF24_writeReg(DYNPD_REG, 0);
 8000724:	2100      	movs	r1, #0
 8000726:	201c      	movs	r0, #28
 8000728:	f7ff fefc 	bl	8000524 <HAL_NRF24_writeReg>
	HAL_NRF24_writeReg(FEATURE_REG, 0);
 800072c:	2100      	movs	r1, #0
 800072e:	201d      	movs	r0, #29
 8000730:	f7ff fef8 	bl	8000524 <HAL_NRF24_writeReg>
}
 8000734:	bf00      	nop
 8000736:	3720      	adds	r7, #32
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	0800284c 	.word	0x0800284c
 8000740:	08002854 	.word	0x08002854

08000744 <HAL_NRF24_init>:

/*
-Description : Intialize NRF
*/
void HAL_NRF24_init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
	
	HAL_NRF24_CE_disable(); // Disable NRF before intlization 
 8000748:	f7ff fee0 	bl	800050c <HAL_NRF24_CE_disable>
	
	HAL_NRF24_resetRegister(ALL_REG); // Reset All Regs
 800074c:	20ff      	movs	r0, #255	; 0xff
 800074e:	f7ff ff4f 	bl	80005f0 <HAL_NRF24_resetRegister>
	
	HAL_Delay(100);
 8000752:	2064      	movs	r0, #100	; 0x64
 8000754:	f000 fb9c 	bl	8000e90 <HAL_Delay>
	
	HAL_NRF24_writeReg(CONFIG_REG,0x00);
 8000758:	2100      	movs	r1, #0
 800075a:	2000      	movs	r0, #0
 800075c:	f7ff fee2 	bl	8000524 <HAL_NRF24_writeReg>
	
	HAL_NRF24_writeReg(EN_AA_REG,0x00); // Disable autoacknolgment
 8000760:	2100      	movs	r1, #0
 8000762:	2001      	movs	r0, #1
 8000764:	f7ff fede 	bl	8000524 <HAL_NRF24_writeReg>
	
	HAL_NRF24_setRFChannel(0x00); // Channel number is choosen later
 8000768:	2000      	movs	r0, #0
 800076a:	f000 f894 	bl	8000896 <HAL_NRF24_setRFChannel>
	
	HAL_NRF24_setDataRate(DataRate_250Kbps); // Air Data Rate : 2Mbps 
 800076e:	2020      	movs	r0, #32
 8000770:	f000 f866 	bl	8000840 <HAL_NRF24_setDataRate>
	
	HAL_NRF24_setAddrsWidth(5); // 5 Bytes width
 8000774:	2005      	movs	r0, #5
 8000776:	f000 f87e 	bl	8000876 <HAL_NRF24_setAddrsWidth>
	
	HAL_NRF24_writeReg(SETUP_RETR_REG,0x00); // Disable  Automatic Retransmission
 800077a:	2100      	movs	r1, #0
 800077c:	2004      	movs	r0, #4
 800077e:	f7ff fed1 	bl	8000524 <HAL_NRF24_writeReg>
	
	HAL_NRF24_CE_enable();  // Enable NRF after intlization 
 8000782:	f7ff feb7 	bl	80004f4 <HAL_NRF24_CE_enable>
	
}
 8000786:	bf00      	nop
 8000788:	bd80      	pop	{r7, pc}

0800078a <HAL_NRF24_TXModeConfig>:

/*
-Description : Config Regitsers for TX mode
*/
void HAL_NRF24_TXModeConfig(uint8_t *Address,uint8_t Channel)
{
 800078a:	b580      	push	{r7, lr}
 800078c:	b082      	sub	sp, #8
 800078e:	af00      	add	r7, sp, #0
 8000790:	6078      	str	r0, [r7, #4]
 8000792:	460b      	mov	r3, r1
 8000794:	70fb      	strb	r3, [r7, #3]
	HAL_NRF24_CE_disable(); // Disable NRF before intlization 
 8000796:	f7ff feb9 	bl	800050c <HAL_NRF24_CE_disable>
	
	HAL_NRF24_setRFChannel(Channel); // Select the channel (0:6 bits of data)
 800079a:	78fb      	ldrb	r3, [r7, #3]
 800079c:	4618      	mov	r0, r3
 800079e:	f000 f87a 	bl	8000896 <HAL_NRF24_setRFChannel>
	
	HAL_NRF24_setTXPower(OutputPower_0dBm); // 0ddBm max power
 80007a2:	2006      	movs	r0, #6
 80007a4:	f000 f8c5 	bl	8000932 <HAL_NRF24_setTXPower>
	
	HAL_NRF24_writeRegMulti(TX_ADDR_REG,Address,5); // Setup TX adresses
 80007a8:	2205      	movs	r2, #5
 80007aa:	6879      	ldr	r1, [r7, #4]
 80007ac:	2010      	movs	r0, #16
 80007ae:	f7ff fedb 	bl	8000568 <HAL_NRF24_writeRegMulti>
	
	HAL_NRF24_setOperationalMode(TransceiverMode_TX);
 80007b2:	2000      	movs	r0, #0
 80007b4:	f000 f89c 	bl	80008f0 <HAL_NRF24_setOperationalMode>
	
	HAL_NRF24_setPowerMode(PowerControl_PowerUp); //Power Up NRF
 80007b8:	2002      	movs	r0, #2
 80007ba:	f000 f87a 	bl	80008b2 <HAL_NRF24_setPowerMode>
	
	HAL_NRF24_CE_enable(); // Enable NRF
 80007be:	f7ff fe99 	bl	80004f4 <HAL_NRF24_CE_enable>
}
 80007c2:	bf00      	nop
 80007c4:	3708      	adds	r7, #8
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
	...

080007cc <HAL_NRF24_transmitData>:

/*
-Description : Transmit Data through NRF
*/
void HAL_NRF24_transmitData(uint8_t *Data)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b084      	sub	sp, #16
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
	
	uint8_t cmd_to_send = W_TX_PAYLOAD;
 80007d4:	23a0      	movs	r3, #160	; 0xa0
 80007d6:	73bb      	strb	r3, [r7, #14]
	
	HAL_NRF24_CS_select();
 80007d8:	f7ff fe74 	bl	80004c4 <HAL_NRF24_CS_select>
	
	HAL_SPI_Transmit(NRF_Handler,&cmd_to_send,1,100); // Transmit Command
 80007dc:	f107 010e 	add.w	r1, r7, #14
 80007e0:	2364      	movs	r3, #100	; 0x64
 80007e2:	2201      	movs	r2, #1
 80007e4:	4814      	ldr	r0, [pc, #80]	; (8000838 <HAL_NRF24_transmitData+0x6c>)
 80007e6:	f001 fada 	bl	8001d9e <HAL_SPI_Transmit>
	
	HAL_SPI_Transmit(NRF_Handler,Data,32,1000); // Send 32 bytes of data
 80007ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007ee:	2220      	movs	r2, #32
 80007f0:	6879      	ldr	r1, [r7, #4]
 80007f2:	4811      	ldr	r0, [pc, #68]	; (8000838 <HAL_NRF24_transmitData+0x6c>)
 80007f4:	f001 fad3 	bl	8001d9e <HAL_SPI_Transmit>
	
	HAL_NRF24_CS_unSelect();
 80007f8:	f7ff fe70 	bl	80004dc <HAL_NRF24_CS_unSelect>
	
	HAL_Delay(10);
 80007fc:	200a      	movs	r0, #10
 80007fe:	f000 fb47 	bl	8000e90 <HAL_Delay>
	
	uint8_t fifoStatus = HAL_NRF24_readReg(FIFO_STATUS_REG); // Get fifo status of NRF
 8000802:	2017      	movs	r0, #23
 8000804:	f7ff fed6 	bl	80005b4 <HAL_NRF24_readReg>
 8000808:	4603      	mov	r3, r0
 800080a:	73fb      	strb	r3, [r7, #15]
	
	if((fifoStatus & (1<<4)) && (!(fifoStatus &(1<<3)))) // To check that fifo is empty and data is sent
 800080c:	7bfb      	ldrb	r3, [r7, #15]
 800080e:	f003 0310 	and.w	r3, r3, #16
 8000812:	2b00      	cmp	r3, #0
 8000814:	d00b      	beq.n	800082e <HAL_NRF24_transmitData+0x62>
 8000816:	7bfb      	ldrb	r3, [r7, #15]
 8000818:	f003 0308 	and.w	r3, r3, #8
 800081c:	2b00      	cmp	r3, #0
 800081e:	d106      	bne.n	800082e <HAL_NRF24_transmitData+0x62>
		{
			//cmd_to_send = FLUSH_TX;
			//HAL_NRF24_sendCommand(cmd_to_send);
			HAL_NRF24_resetRegister(FIFO_STATUS_REG); //  Reset FIFO
 8000820:	2017      	movs	r0, #23
 8000822:	f7ff fee5 	bl	80005f0 <HAL_NRF24_resetRegister>
			HAL_GPIO_TogglePin(LED_GPIO_Port,LED_Pin); 
 8000826:	2140      	movs	r1, #64	; 0x40
 8000828:	4804      	ldr	r0, [pc, #16]	; (800083c <HAL_NRF24_transmitData+0x70>)
 800082a:	f000 fdf0 	bl	800140e <HAL_GPIO_TogglePin>
		}
			
}
 800082e:	bf00      	nop
 8000830:	3710      	adds	r7, #16
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	20000030 	.word	0x20000030
 800083c:	40020000 	.word	0x40020000

08000840 <HAL_NRF24_setDataRate>:

/*
-Description : Set data rate to be sent
*/
void HAL_NRF24_setDataRate(NRF24_DataRate dataRate)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b084      	sub	sp, #16
 8000844:	af00      	add	r7, sp, #0
 8000846:	4603      	mov	r3, r0
 8000848:	71fb      	strb	r3, [r7, #7]
	
	uint8_t reg;
	reg = HAL_NRF24_readReg(RF_SETUP_REG);
 800084a:	2006      	movs	r0, #6
 800084c:	f7ff feb2 	bl	80005b4 <HAL_NRF24_readReg>
 8000850:	4603      	mov	r3, r0
 8000852:	73fb      	strb	r3, [r7, #15]
	reg &= (uint8_t)(~RF_DR_MASK);
 8000854:	7bfb      	ldrb	r3, [r7, #15]
 8000856:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 800085a:	73fb      	strb	r3, [r7, #15]
	reg |= dataRate;
 800085c:	7bfa      	ldrb	r2, [r7, #15]
 800085e:	79fb      	ldrb	r3, [r7, #7]
 8000860:	4313      	orrs	r3, r2
 8000862:	73fb      	strb	r3, [r7, #15]
	HAL_NRF24_writeReg(RF_SETUP_REG,reg);
 8000864:	7bfb      	ldrb	r3, [r7, #15]
 8000866:	4619      	mov	r1, r3
 8000868:	2006      	movs	r0, #6
 800086a:	f7ff fe5b 	bl	8000524 <HAL_NRF24_writeReg>

}
 800086e:	bf00      	nop
 8000870:	3710      	adds	r7, #16
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}

08000876 <HAL_NRF24_setAddrsWidth>:

/*
-Description : Set Addreses width
*/
void HAL_NRF24_setAddrsWidth(uint8_t sizeOfAdressesWidthInBytes)
{
 8000876:	b580      	push	{r7, lr}
 8000878:	b082      	sub	sp, #8
 800087a:	af00      	add	r7, sp, #0
 800087c:	4603      	mov	r3, r0
 800087e:	71fb      	strb	r3, [r7, #7]
	HAL_NRF24_writeReg(SETUP_AW_REG,(uint8_t)(sizeOfAdressesWidthInBytes - 2U));
 8000880:	79fb      	ldrb	r3, [r7, #7]
 8000882:	3b02      	subs	r3, #2
 8000884:	b2db      	uxtb	r3, r3
 8000886:	4619      	mov	r1, r3
 8000888:	2003      	movs	r0, #3
 800088a:	f7ff fe4b 	bl	8000524 <HAL_NRF24_writeReg>
}
 800088e:	bf00      	nop
 8000890:	3708      	adds	r7, #8
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}

08000896 <HAL_NRF24_setRFChannel>:

/*
-Description : Set Channel Number
*/
void HAL_NRF24_setRFChannel(uint8_t channelNumber)
{
 8000896:	b580      	push	{r7, lr}
 8000898:	b082      	sub	sp, #8
 800089a:	af00      	add	r7, sp, #0
 800089c:	4603      	mov	r3, r0
 800089e:	71fb      	strb	r3, [r7, #7]
	HAL_NRF24_writeReg(RF_CH_REG,channelNumber);
 80008a0:	79fb      	ldrb	r3, [r7, #7]
 80008a2:	4619      	mov	r1, r3
 80008a4:	2005      	movs	r0, #5
 80008a6:	f7ff fe3d 	bl	8000524 <HAL_NRF24_writeReg>
}
 80008aa:	bf00      	nop
 80008ac:	3708      	adds	r7, #8
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}

080008b2 <HAL_NRF24_setPowerMode>:

/*
-Description : To power up or power down NRF
*/
void HAL_NRF24_setPowerMode(NRF24_PowerControl powerControl)
{
 80008b2:	b580      	push	{r7, lr}
 80008b4:	b084      	sub	sp, #16
 80008b6:	af00      	add	r7, sp, #0
 80008b8:	4603      	mov	r3, r0
 80008ba:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;
	reg = HAL_NRF24_readReg(CONFIG_REG);
 80008bc:	2000      	movs	r0, #0
 80008be:	f7ff fe79 	bl	80005b4 <HAL_NRF24_readReg>
 80008c2:	4603      	mov	r3, r0
 80008c4:	73fb      	strb	r3, [r7, #15]
	
	if(powerControl == PowerControl_PowerUp)
 80008c6:	79fb      	ldrb	r3, [r7, #7]
 80008c8:	2b02      	cmp	r3, #2
 80008ca:	d104      	bne.n	80008d6 <HAL_NRF24_setPowerMode+0x24>
		reg |= PWR_UP_BIT;
 80008cc:	7bfb      	ldrb	r3, [r7, #15]
 80008ce:	f043 0302 	orr.w	r3, r3, #2
 80008d2:	73fb      	strb	r3, [r7, #15]
 80008d4:	e003      	b.n	80008de <HAL_NRF24_setPowerMode+0x2c>
	else
		reg &= ~(PWR_UP_BIT);
 80008d6:	7bfb      	ldrb	r3, [r7, #15]
 80008d8:	f023 0302 	bic.w	r3, r3, #2
 80008dc:	73fb      	strb	r3, [r7, #15]
	
	HAL_NRF24_writeReg(CONFIG_REG,reg);
 80008de:	7bfb      	ldrb	r3, [r7, #15]
 80008e0:	4619      	mov	r1, r3
 80008e2:	2000      	movs	r0, #0
 80008e4:	f7ff fe1e 	bl	8000524 <HAL_NRF24_writeReg>
	
}
 80008e8:	bf00      	nop
 80008ea:	3710      	adds	r7, #16
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}

080008f0 <HAL_NRF24_setOperationalMode>:

/*
-Description : to setup mode RX or TX
*/
void HAL_NRF24_setOperationalMode(NRF24_TransceiverMode transceiverMode)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b084      	sub	sp, #16
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	4603      	mov	r3, r0
 80008f8:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;
	reg = HAL_NRF24_readReg(CONFIG_REG);
 80008fa:	2000      	movs	r0, #0
 80008fc:	f7ff fe5a 	bl	80005b4 <HAL_NRF24_readReg>
 8000900:	4603      	mov	r3, r0
 8000902:	73fb      	strb	r3, [r7, #15]
	reg &= (uint8_t)(~PRIM_RX_BIT);
 8000904:	7bfb      	ldrb	r3, [r7, #15]
 8000906:	f023 0301 	bic.w	r3, r3, #1
 800090a:	73fb      	strb	r3, [r7, #15]
	reg |= (transceiverMode & PRIM_RX_BIT);
 800090c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000910:	f003 0301 	and.w	r3, r3, #1
 8000914:	b25a      	sxtb	r2, r3
 8000916:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800091a:	4313      	orrs	r3, r2
 800091c:	b25b      	sxtb	r3, r3
 800091e:	73fb      	strb	r3, [r7, #15]
	HAL_NRF24_writeReg(CONFIG_REG,reg);
 8000920:	7bfb      	ldrb	r3, [r7, #15]
 8000922:	4619      	mov	r1, r3
 8000924:	2000      	movs	r0, #0
 8000926:	f7ff fdfd 	bl	8000524 <HAL_NRF24_writeReg>
}
 800092a:	bf00      	nop
 800092c:	3710      	adds	r7, #16
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}

08000932 <HAL_NRF24_setTXPower>:
/*
-Description : to setup output power of TX antetna
*/

void HAL_NRF24_setTXPower(NRF24_OutputPower outputPowerOfAntena)
{
 8000932:	b580      	push	{r7, lr}
 8000934:	b084      	sub	sp, #16
 8000936:	af00      	add	r7, sp, #0
 8000938:	4603      	mov	r3, r0
 800093a:	71fb      	strb	r3, [r7, #7]
	uint8_t reg = HAL_NRF24_readReg(RF_SETUP_REG);
 800093c:	2006      	movs	r0, #6
 800093e:	f7ff fe39 	bl	80005b4 <HAL_NRF24_readReg>
 8000942:	4603      	mov	r3, r0
 8000944:	73fb      	strb	r3, [r7, #15]
	reg &= ~(RF_PWR_MASK);
 8000946:	7bfb      	ldrb	r3, [r7, #15]
 8000948:	f023 0306 	bic.w	r3, r3, #6
 800094c:	73fb      	strb	r3, [r7, #15]
	reg |= outputPowerOfAntena;
 800094e:	7bfa      	ldrb	r2, [r7, #15]
 8000950:	79fb      	ldrb	r3, [r7, #7]
 8000952:	4313      	orrs	r3, r2
 8000954:	73fb      	strb	r3, [r7, #15]
	HAL_NRF24_writeReg(RF_SETUP_REG,reg);
 8000956:	7bfb      	ldrb	r3, [r7, #15]
 8000958:	4619      	mov	r1, r3
 800095a:	2006      	movs	r0, #6
 800095c:	f7ff fde2 	bl	8000524 <HAL_NRF24_writeReg>
}
 8000960:	bf00      	nop
 8000962:	3710      	adds	r7, #16
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}

08000968 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	controlPacket.control = 1;
 800096e:	4b1c      	ldr	r3, [pc, #112]	; (80009e0 <main+0x78>)
 8000970:	2201      	movs	r2, #1
 8000972:	701a      	strb	r2, [r3, #0]
	controlPacket.vx = 0;
 8000974:	4b1a      	ldr	r3, [pc, #104]	; (80009e0 <main+0x78>)
 8000976:	f04f 0200 	mov.w	r2, #0
 800097a:	605a      	str	r2, [r3, #4]
	controlPacket.vy = 0;
 800097c:	4b18      	ldr	r3, [pc, #96]	; (80009e0 <main+0x78>)
 800097e:	f04f 0200 	mov.w	r2, #0
 8000982:	609a      	str	r2, [r3, #8]
	controlPacket.vw = 0;
 8000984:	4b16      	ldr	r3, [pc, #88]	; (80009e0 <main+0x78>)
 8000986:	f04f 0200 	mov.w	r2, #0
 800098a:	60da      	str	r2, [r3, #12]
	controlPacket.solenoidPower = 2;
 800098c:	4b14      	ldr	r3, [pc, #80]	; (80009e0 <main+0x78>)
 800098e:	2202      	movs	r2, #2
 8000990:	741a      	strb	r2, [r3, #16]
	controlPacket.crc = 4;
 8000992:	4b13      	ldr	r3, [pc, #76]	; (80009e0 <main+0x78>)
 8000994:	2204      	movs	r2, #4
 8000996:	825a      	strh	r2, [r3, #18]
	/* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000998:	f000 fa08 	bl	8000dac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800099c:	f000 f824 	bl	80009e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009a0:	f000 f8c2 	bl	8000b28 <MX_GPIO_Init>
  MX_SPI1_Init();
 80009a4:	f000 f88a 	bl	8000abc <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  HAL_NRF24_init();
 80009a8:	f7ff fecc 	bl	8000744 <HAL_NRF24_init>
  HAL_NRF24_TXModeConfig(TxAdress,123); // Channel Number is 123
 80009ac:	217b      	movs	r1, #123	; 0x7b
 80009ae:	480d      	ldr	r0, [pc, #52]	; (80009e4 <main+0x7c>)
 80009b0:	f7ff feeb 	bl	800078a <HAL_NRF24_TXModeConfig>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  for (int i = 0; i <= 1000; i++)
 80009b4:	2300      	movs	r3, #0
 80009b6:	607b      	str	r3, [r7, #4]
 80009b8:	e00d      	b.n	80009d6 <main+0x6e>
	  {
//		  HAL_Delay(500);
		  controlPacket.vw = i;
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	ee07 3a90 	vmov	s15, r3
 80009c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80009c4:	4b06      	ldr	r3, [pc, #24]	; (80009e0 <main+0x78>)
 80009c6:	edc3 7a03 	vstr	s15, [r3, #12]

		  HAL_NRF24_transmitData(&controlPacket);
 80009ca:	4805      	ldr	r0, [pc, #20]	; (80009e0 <main+0x78>)
 80009cc:	f7ff fefe 	bl	80007cc <HAL_NRF24_transmitData>
	  for (int i = 0; i <= 1000; i++)
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	3301      	adds	r3, #1
 80009d4:	607b      	str	r3, [r7, #4]
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80009dc:	dded      	ble.n	80009ba <main+0x52>
 80009de:	e7e9      	b.n	80009b4 <main+0x4c>
 80009e0:	20000088 	.word	0x20000088
 80009e4:	20000000 	.word	0x20000000

080009e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b094      	sub	sp, #80	; 0x50
 80009ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009ee:	f107 0320 	add.w	r3, r7, #32
 80009f2:	2230      	movs	r2, #48	; 0x30
 80009f4:	2100      	movs	r1, #0
 80009f6:	4618      	mov	r0, r3
 80009f8:	f001 fef0 	bl	80027dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009fc:	f107 030c 	add.w	r3, r7, #12
 8000a00:	2200      	movs	r2, #0
 8000a02:	601a      	str	r2, [r3, #0]
 8000a04:	605a      	str	r2, [r3, #4]
 8000a06:	609a      	str	r2, [r3, #8]
 8000a08:	60da      	str	r2, [r3, #12]
 8000a0a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	60bb      	str	r3, [r7, #8]
 8000a10:	4b28      	ldr	r3, [pc, #160]	; (8000ab4 <SystemClock_Config+0xcc>)
 8000a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a14:	4a27      	ldr	r2, [pc, #156]	; (8000ab4 <SystemClock_Config+0xcc>)
 8000a16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a1a:	6413      	str	r3, [r2, #64]	; 0x40
 8000a1c:	4b25      	ldr	r3, [pc, #148]	; (8000ab4 <SystemClock_Config+0xcc>)
 8000a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a24:	60bb      	str	r3, [r7, #8]
 8000a26:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a28:	2300      	movs	r3, #0
 8000a2a:	607b      	str	r3, [r7, #4]
 8000a2c:	4b22      	ldr	r3, [pc, #136]	; (8000ab8 <SystemClock_Config+0xd0>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4a21      	ldr	r2, [pc, #132]	; (8000ab8 <SystemClock_Config+0xd0>)
 8000a32:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a36:	6013      	str	r3, [r2, #0]
 8000a38:	4b1f      	ldr	r3, [pc, #124]	; (8000ab8 <SystemClock_Config+0xd0>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a40:	607b      	str	r3, [r7, #4]
 8000a42:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a44:	2302      	movs	r3, #2
 8000a46:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a48:	2301      	movs	r3, #1
 8000a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a4c:	2310      	movs	r3, #16
 8000a4e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a50:	2302      	movs	r3, #2
 8000a52:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a54:	2300      	movs	r3, #0
 8000a56:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000a58:	2308      	movs	r3, #8
 8000a5a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 80;
 8000a5c:	2350      	movs	r3, #80	; 0x50
 8000a5e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a60:	2302      	movs	r3, #2
 8000a62:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a64:	2304      	movs	r3, #4
 8000a66:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a68:	f107 0320 	add.w	r3, r7, #32
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f000 fce9 	bl	8001444 <HAL_RCC_OscConfig>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000a78:	f000 f8bc 	bl	8000bf4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a7c:	230f      	movs	r3, #15
 8000a7e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a80:	2302      	movs	r3, #2
 8000a82:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a84:	2300      	movs	r3, #0
 8000a86:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a8c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8000a8e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a92:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a94:	f107 030c 	add.w	r3, r7, #12
 8000a98:	2102      	movs	r1, #2
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f000 ff4a 	bl	8001934 <HAL_RCC_ClockConfig>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000aa6:	f000 f8a5 	bl	8000bf4 <Error_Handler>
  }
}
 8000aaa:	bf00      	nop
 8000aac:	3750      	adds	r7, #80	; 0x50
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	40023800 	.word	0x40023800
 8000ab8:	40007000 	.word	0x40007000

08000abc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ac0:	4b17      	ldr	r3, [pc, #92]	; (8000b20 <MX_SPI1_Init+0x64>)
 8000ac2:	4a18      	ldr	r2, [pc, #96]	; (8000b24 <MX_SPI1_Init+0x68>)
 8000ac4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ac6:	4b16      	ldr	r3, [pc, #88]	; (8000b20 <MX_SPI1_Init+0x64>)
 8000ac8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000acc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ace:	4b14      	ldr	r3, [pc, #80]	; (8000b20 <MX_SPI1_Init+0x64>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ad4:	4b12      	ldr	r3, [pc, #72]	; (8000b20 <MX_SPI1_Init+0x64>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ada:	4b11      	ldr	r3, [pc, #68]	; (8000b20 <MX_SPI1_Init+0x64>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ae0:	4b0f      	ldr	r3, [pc, #60]	; (8000b20 <MX_SPI1_Init+0x64>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ae6:	4b0e      	ldr	r3, [pc, #56]	; (8000b20 <MX_SPI1_Init+0x64>)
 8000ae8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000aec:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000aee:	4b0c      	ldr	r3, [pc, #48]	; (8000b20 <MX_SPI1_Init+0x64>)
 8000af0:	2208      	movs	r2, #8
 8000af2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000af4:	4b0a      	ldr	r3, [pc, #40]	; (8000b20 <MX_SPI1_Init+0x64>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000afa:	4b09      	ldr	r3, [pc, #36]	; (8000b20 <MX_SPI1_Init+0x64>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b00:	4b07      	ldr	r3, [pc, #28]	; (8000b20 <MX_SPI1_Init+0x64>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000b06:	4b06      	ldr	r3, [pc, #24]	; (8000b20 <MX_SPI1_Init+0x64>)
 8000b08:	220a      	movs	r2, #10
 8000b0a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b0c:	4804      	ldr	r0, [pc, #16]	; (8000b20 <MX_SPI1_Init+0x64>)
 8000b0e:	f001 f8bd 	bl	8001c8c <HAL_SPI_Init>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000b18:	f000 f86c 	bl	8000bf4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b1c:	bf00      	nop
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	20000030 	.word	0x20000030
 8000b24:	40013000 	.word	0x40013000

08000b28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b088      	sub	sp, #32
 8000b2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b2e:	f107 030c 	add.w	r3, r7, #12
 8000b32:	2200      	movs	r2, #0
 8000b34:	601a      	str	r2, [r3, #0]
 8000b36:	605a      	str	r2, [r3, #4]
 8000b38:	609a      	str	r2, [r3, #8]
 8000b3a:	60da      	str	r2, [r3, #12]
 8000b3c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b3e:	2300      	movs	r3, #0
 8000b40:	60bb      	str	r3, [r7, #8]
 8000b42:	4b29      	ldr	r3, [pc, #164]	; (8000be8 <MX_GPIO_Init+0xc0>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b46:	4a28      	ldr	r2, [pc, #160]	; (8000be8 <MX_GPIO_Init+0xc0>)
 8000b48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b4e:	4b26      	ldr	r3, [pc, #152]	; (8000be8 <MX_GPIO_Init+0xc0>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b56:	60bb      	str	r3, [r7, #8]
 8000b58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	607b      	str	r3, [r7, #4]
 8000b5e:	4b22      	ldr	r3, [pc, #136]	; (8000be8 <MX_GPIO_Init+0xc0>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b62:	4a21      	ldr	r2, [pc, #132]	; (8000be8 <MX_GPIO_Init+0xc0>)
 8000b64:	f043 0301 	orr.w	r3, r3, #1
 8000b68:	6313      	str	r3, [r2, #48]	; 0x30
 8000b6a:	4b1f      	ldr	r3, [pc, #124]	; (8000be8 <MX_GPIO_Init+0xc0>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6e:	f003 0301 	and.w	r3, r3, #1
 8000b72:	607b      	str	r3, [r7, #4]
 8000b74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b76:	2300      	movs	r3, #0
 8000b78:	603b      	str	r3, [r7, #0]
 8000b7a:	4b1b      	ldr	r3, [pc, #108]	; (8000be8 <MX_GPIO_Init+0xc0>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7e:	4a1a      	ldr	r2, [pc, #104]	; (8000be8 <MX_GPIO_Init+0xc0>)
 8000b80:	f043 0302 	orr.w	r3, r3, #2
 8000b84:	6313      	str	r3, [r2, #48]	; 0x30
 8000b86:	4b18      	ldr	r3, [pc, #96]	; (8000be8 <MX_GPIO_Init+0xc0>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8a:	f003 0302 	and.w	r3, r3, #2
 8000b8e:	603b      	str	r3, [r7, #0]
 8000b90:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000b92:	2200      	movs	r2, #0
 8000b94:	2140      	movs	r1, #64	; 0x40
 8000b96:	4815      	ldr	r0, [pc, #84]	; (8000bec <MX_GPIO_Init+0xc4>)
 8000b98:	f000 fc20 	bl	80013dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CE_Pin|CSN_Pin, GPIO_PIN_RESET);
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	21c0      	movs	r1, #192	; 0xc0
 8000ba0:	4813      	ldr	r0, [pc, #76]	; (8000bf0 <MX_GPIO_Init+0xc8>)
 8000ba2:	f000 fc1b 	bl	80013dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8000ba6:	2340      	movs	r3, #64	; 0x40
 8000ba8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000baa:	2301      	movs	r3, #1
 8000bac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000bb6:	f107 030c 	add.w	r3, r7, #12
 8000bba:	4619      	mov	r1, r3
 8000bbc:	480b      	ldr	r0, [pc, #44]	; (8000bec <MX_GPIO_Init+0xc4>)
 8000bbe:	f000 fa71 	bl	80010a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : CE_Pin CSN_Pin */
  GPIO_InitStruct.Pin = CE_Pin|CSN_Pin;
 8000bc2:	23c0      	movs	r3, #192	; 0xc0
 8000bc4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bce:	2302      	movs	r3, #2
 8000bd0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bd2:	f107 030c 	add.w	r3, r7, #12
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	4805      	ldr	r0, [pc, #20]	; (8000bf0 <MX_GPIO_Init+0xc8>)
 8000bda:	f000 fa63 	bl	80010a4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bde:	bf00      	nop
 8000be0:	3720      	adds	r7, #32
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	40023800 	.word	0x40023800
 8000bec:	40020000 	.word	0x40020000
 8000bf0:	40020400 	.word	0x40020400

08000bf4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bf8:	b672      	cpsid	i
}
 8000bfa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bfc:	e7fe      	b.n	8000bfc <Error_Handler+0x8>
	...

08000c00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b083      	sub	sp, #12
 8000c04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c06:	2300      	movs	r3, #0
 8000c08:	607b      	str	r3, [r7, #4]
 8000c0a:	4b10      	ldr	r3, [pc, #64]	; (8000c4c <HAL_MspInit+0x4c>)
 8000c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c0e:	4a0f      	ldr	r2, [pc, #60]	; (8000c4c <HAL_MspInit+0x4c>)
 8000c10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c14:	6453      	str	r3, [r2, #68]	; 0x44
 8000c16:	4b0d      	ldr	r3, [pc, #52]	; (8000c4c <HAL_MspInit+0x4c>)
 8000c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c1e:	607b      	str	r3, [r7, #4]
 8000c20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c22:	2300      	movs	r3, #0
 8000c24:	603b      	str	r3, [r7, #0]
 8000c26:	4b09      	ldr	r3, [pc, #36]	; (8000c4c <HAL_MspInit+0x4c>)
 8000c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c2a:	4a08      	ldr	r2, [pc, #32]	; (8000c4c <HAL_MspInit+0x4c>)
 8000c2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c30:	6413      	str	r3, [r2, #64]	; 0x40
 8000c32:	4b06      	ldr	r3, [pc, #24]	; (8000c4c <HAL_MspInit+0x4c>)
 8000c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c3a:	603b      	str	r3, [r7, #0]
 8000c3c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c3e:	bf00      	nop
 8000c40:	370c      	adds	r7, #12
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	40023800 	.word	0x40023800

08000c50 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b08a      	sub	sp, #40	; 0x28
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c58:	f107 0314 	add.w	r3, r7, #20
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	601a      	str	r2, [r3, #0]
 8000c60:	605a      	str	r2, [r3, #4]
 8000c62:	609a      	str	r2, [r3, #8]
 8000c64:	60da      	str	r2, [r3, #12]
 8000c66:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a19      	ldr	r2, [pc, #100]	; (8000cd4 <HAL_SPI_MspInit+0x84>)
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	d12b      	bne.n	8000cca <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c72:	2300      	movs	r3, #0
 8000c74:	613b      	str	r3, [r7, #16]
 8000c76:	4b18      	ldr	r3, [pc, #96]	; (8000cd8 <HAL_SPI_MspInit+0x88>)
 8000c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c7a:	4a17      	ldr	r2, [pc, #92]	; (8000cd8 <HAL_SPI_MspInit+0x88>)
 8000c7c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c80:	6453      	str	r3, [r2, #68]	; 0x44
 8000c82:	4b15      	ldr	r3, [pc, #84]	; (8000cd8 <HAL_SPI_MspInit+0x88>)
 8000c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c86:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c8a:	613b      	str	r3, [r7, #16]
 8000c8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c8e:	2300      	movs	r3, #0
 8000c90:	60fb      	str	r3, [r7, #12]
 8000c92:	4b11      	ldr	r3, [pc, #68]	; (8000cd8 <HAL_SPI_MspInit+0x88>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c96:	4a10      	ldr	r2, [pc, #64]	; (8000cd8 <HAL_SPI_MspInit+0x88>)
 8000c98:	f043 0302 	orr.w	r3, r3, #2
 8000c9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c9e:	4b0e      	ldr	r3, [pc, #56]	; (8000cd8 <HAL_SPI_MspInit+0x88>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca2:	f003 0302 	and.w	r3, r3, #2
 8000ca6:	60fb      	str	r3, [r7, #12]
 8000ca8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000caa:	2338      	movs	r3, #56	; 0x38
 8000cac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cae:	2302      	movs	r3, #2
 8000cb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cb6:	2303      	movs	r3, #3
 8000cb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000cba:	2305      	movs	r3, #5
 8000cbc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cbe:	f107 0314 	add.w	r3, r7, #20
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	4805      	ldr	r0, [pc, #20]	; (8000cdc <HAL_SPI_MspInit+0x8c>)
 8000cc6:	f000 f9ed 	bl	80010a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000cca:	bf00      	nop
 8000ccc:	3728      	adds	r7, #40	; 0x28
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	40013000 	.word	0x40013000
 8000cd8:	40023800 	.word	0x40023800
 8000cdc:	40020400 	.word	0x40020400

08000ce0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ce4:	e7fe      	b.n	8000ce4 <NMI_Handler+0x4>

08000ce6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ce6:	b480      	push	{r7}
 8000ce8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cea:	e7fe      	b.n	8000cea <HardFault_Handler+0x4>

08000cec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cf0:	e7fe      	b.n	8000cf0 <MemManage_Handler+0x4>

08000cf2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cf2:	b480      	push	{r7}
 8000cf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cf6:	e7fe      	b.n	8000cf6 <BusFault_Handler+0x4>

08000cf8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cfc:	e7fe      	b.n	8000cfc <UsageFault_Handler+0x4>

08000cfe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cfe:	b480      	push	{r7}
 8000d00:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d02:	bf00      	nop
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr

08000d0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d10:	bf00      	nop
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr

08000d1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d1a:	b480      	push	{r7}
 8000d1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d1e:	bf00      	nop
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr

08000d28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d2c:	f000 f890 	bl	8000e50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d30:	bf00      	nop
 8000d32:	bd80      	pop	{r7, pc}

08000d34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d38:	4b06      	ldr	r3, [pc, #24]	; (8000d54 <SystemInit+0x20>)
 8000d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d3e:	4a05      	ldr	r2, [pc, #20]	; (8000d54 <SystemInit+0x20>)
 8000d40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d48:	bf00      	nop
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	e000ed00 	.word	0xe000ed00

08000d58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d90 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d5c:	480d      	ldr	r0, [pc, #52]	; (8000d94 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d5e:	490e      	ldr	r1, [pc, #56]	; (8000d98 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d60:	4a0e      	ldr	r2, [pc, #56]	; (8000d9c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d64:	e002      	b.n	8000d6c <LoopCopyDataInit>

08000d66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d6a:	3304      	adds	r3, #4

08000d6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d70:	d3f9      	bcc.n	8000d66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d72:	4a0b      	ldr	r2, [pc, #44]	; (8000da0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d74:	4c0b      	ldr	r4, [pc, #44]	; (8000da4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d78:	e001      	b.n	8000d7e <LoopFillZerobss>

08000d7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d7c:	3204      	adds	r2, #4

08000d7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d80:	d3fb      	bcc.n	8000d7a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d82:	f7ff ffd7 	bl	8000d34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d86:	f001 fd31 	bl	80027ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d8a:	f7ff fded 	bl	8000968 <main>
  bx  lr    
 8000d8e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d90:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d98:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000d9c:	0800287c 	.word	0x0800287c
  ldr r2, =_sbss
 8000da0:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000da4:	200000a0 	.word	0x200000a0

08000da8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000da8:	e7fe      	b.n	8000da8 <ADC_IRQHandler>
	...

08000dac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000db0:	4b0e      	ldr	r3, [pc, #56]	; (8000dec <HAL_Init+0x40>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a0d      	ldr	r2, [pc, #52]	; (8000dec <HAL_Init+0x40>)
 8000db6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000dbc:	4b0b      	ldr	r3, [pc, #44]	; (8000dec <HAL_Init+0x40>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a0a      	ldr	r2, [pc, #40]	; (8000dec <HAL_Init+0x40>)
 8000dc2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000dc6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dc8:	4b08      	ldr	r3, [pc, #32]	; (8000dec <HAL_Init+0x40>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a07      	ldr	r2, [pc, #28]	; (8000dec <HAL_Init+0x40>)
 8000dce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dd2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dd4:	2003      	movs	r0, #3
 8000dd6:	f000 f931 	bl	800103c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dda:	200f      	movs	r0, #15
 8000ddc:	f000 f808 	bl	8000df0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000de0:	f7ff ff0e 	bl	8000c00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000de4:	2300      	movs	r3, #0
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	40023c00 	.word	0x40023c00

08000df0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000df8:	4b12      	ldr	r3, [pc, #72]	; (8000e44 <HAL_InitTick+0x54>)
 8000dfa:	681a      	ldr	r2, [r3, #0]
 8000dfc:	4b12      	ldr	r3, [pc, #72]	; (8000e48 <HAL_InitTick+0x58>)
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	4619      	mov	r1, r3
 8000e02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e06:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f000 f93b 	bl	800108a <HAL_SYSTICK_Config>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	e00e      	b.n	8000e3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	2b0f      	cmp	r3, #15
 8000e22:	d80a      	bhi.n	8000e3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e24:	2200      	movs	r2, #0
 8000e26:	6879      	ldr	r1, [r7, #4]
 8000e28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e2c:	f000 f911 	bl	8001052 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e30:	4a06      	ldr	r2, [pc, #24]	; (8000e4c <HAL_InitTick+0x5c>)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e36:	2300      	movs	r3, #0
 8000e38:	e000      	b.n	8000e3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e3a:	2301      	movs	r3, #1
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	3708      	adds	r7, #8
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	20000008 	.word	0x20000008
 8000e48:	20000010 	.word	0x20000010
 8000e4c:	2000000c 	.word	0x2000000c

08000e50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e54:	4b06      	ldr	r3, [pc, #24]	; (8000e70 <HAL_IncTick+0x20>)
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	461a      	mov	r2, r3
 8000e5a:	4b06      	ldr	r3, [pc, #24]	; (8000e74 <HAL_IncTick+0x24>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	4413      	add	r3, r2
 8000e60:	4a04      	ldr	r2, [pc, #16]	; (8000e74 <HAL_IncTick+0x24>)
 8000e62:	6013      	str	r3, [r2, #0]
}
 8000e64:	bf00      	nop
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	20000010 	.word	0x20000010
 8000e74:	2000009c 	.word	0x2000009c

08000e78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e7c:	4b03      	ldr	r3, [pc, #12]	; (8000e8c <HAL_GetTick+0x14>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	2000009c 	.word	0x2000009c

08000e90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b084      	sub	sp, #16
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e98:	f7ff ffee 	bl	8000e78 <HAL_GetTick>
 8000e9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000ea8:	d005      	beq.n	8000eb6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000eaa:	4b0a      	ldr	r3, [pc, #40]	; (8000ed4 <HAL_Delay+0x44>)
 8000eac:	781b      	ldrb	r3, [r3, #0]
 8000eae:	461a      	mov	r2, r3
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	4413      	add	r3, r2
 8000eb4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000eb6:	bf00      	nop
 8000eb8:	f7ff ffde 	bl	8000e78 <HAL_GetTick>
 8000ebc:	4602      	mov	r2, r0
 8000ebe:	68bb      	ldr	r3, [r7, #8]
 8000ec0:	1ad3      	subs	r3, r2, r3
 8000ec2:	68fa      	ldr	r2, [r7, #12]
 8000ec4:	429a      	cmp	r2, r3
 8000ec6:	d8f7      	bhi.n	8000eb8 <HAL_Delay+0x28>
  {
  }
}
 8000ec8:	bf00      	nop
 8000eca:	bf00      	nop
 8000ecc:	3710      	adds	r7, #16
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	20000010 	.word	0x20000010

08000ed8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b085      	sub	sp, #20
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	f003 0307 	and.w	r3, r3, #7
 8000ee6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ee8:	4b0c      	ldr	r3, [pc, #48]	; (8000f1c <__NVIC_SetPriorityGrouping+0x44>)
 8000eea:	68db      	ldr	r3, [r3, #12]
 8000eec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eee:	68ba      	ldr	r2, [r7, #8]
 8000ef0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000efc:	68bb      	ldr	r3, [r7, #8]
 8000efe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f0a:	4a04      	ldr	r2, [pc, #16]	; (8000f1c <__NVIC_SetPriorityGrouping+0x44>)
 8000f0c:	68bb      	ldr	r3, [r7, #8]
 8000f0e:	60d3      	str	r3, [r2, #12]
}
 8000f10:	bf00      	nop
 8000f12:	3714      	adds	r7, #20
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr
 8000f1c:	e000ed00 	.word	0xe000ed00

08000f20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f24:	4b04      	ldr	r3, [pc, #16]	; (8000f38 <__NVIC_GetPriorityGrouping+0x18>)
 8000f26:	68db      	ldr	r3, [r3, #12]
 8000f28:	0a1b      	lsrs	r3, r3, #8
 8000f2a:	f003 0307 	and.w	r3, r3, #7
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr
 8000f38:	e000ed00 	.word	0xe000ed00

08000f3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b083      	sub	sp, #12
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	4603      	mov	r3, r0
 8000f44:	6039      	str	r1, [r7, #0]
 8000f46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	db0a      	blt.n	8000f66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	b2da      	uxtb	r2, r3
 8000f54:	490c      	ldr	r1, [pc, #48]	; (8000f88 <__NVIC_SetPriority+0x4c>)
 8000f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5a:	0112      	lsls	r2, r2, #4
 8000f5c:	b2d2      	uxtb	r2, r2
 8000f5e:	440b      	add	r3, r1
 8000f60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f64:	e00a      	b.n	8000f7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	b2da      	uxtb	r2, r3
 8000f6a:	4908      	ldr	r1, [pc, #32]	; (8000f8c <__NVIC_SetPriority+0x50>)
 8000f6c:	79fb      	ldrb	r3, [r7, #7]
 8000f6e:	f003 030f 	and.w	r3, r3, #15
 8000f72:	3b04      	subs	r3, #4
 8000f74:	0112      	lsls	r2, r2, #4
 8000f76:	b2d2      	uxtb	r2, r2
 8000f78:	440b      	add	r3, r1
 8000f7a:	761a      	strb	r2, [r3, #24]
}
 8000f7c:	bf00      	nop
 8000f7e:	370c      	adds	r7, #12
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr
 8000f88:	e000e100 	.word	0xe000e100
 8000f8c:	e000ed00 	.word	0xe000ed00

08000f90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b089      	sub	sp, #36	; 0x24
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	60f8      	str	r0, [r7, #12]
 8000f98:	60b9      	str	r1, [r7, #8]
 8000f9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	f003 0307 	and.w	r3, r3, #7
 8000fa2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fa4:	69fb      	ldr	r3, [r7, #28]
 8000fa6:	f1c3 0307 	rsb	r3, r3, #7
 8000faa:	2b04      	cmp	r3, #4
 8000fac:	bf28      	it	cs
 8000fae:	2304      	movcs	r3, #4
 8000fb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	3304      	adds	r3, #4
 8000fb6:	2b06      	cmp	r3, #6
 8000fb8:	d902      	bls.n	8000fc0 <NVIC_EncodePriority+0x30>
 8000fba:	69fb      	ldr	r3, [r7, #28]
 8000fbc:	3b03      	subs	r3, #3
 8000fbe:	e000      	b.n	8000fc2 <NVIC_EncodePriority+0x32>
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fc4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000fc8:	69bb      	ldr	r3, [r7, #24]
 8000fca:	fa02 f303 	lsl.w	r3, r2, r3
 8000fce:	43da      	mvns	r2, r3
 8000fd0:	68bb      	ldr	r3, [r7, #8]
 8000fd2:	401a      	ands	r2, r3
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fd8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	fa01 f303 	lsl.w	r3, r1, r3
 8000fe2:	43d9      	mvns	r1, r3
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fe8:	4313      	orrs	r3, r2
         );
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	3724      	adds	r7, #36	; 0x24
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
	...

08000ff8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	3b01      	subs	r3, #1
 8001004:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001008:	d301      	bcc.n	800100e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800100a:	2301      	movs	r3, #1
 800100c:	e00f      	b.n	800102e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800100e:	4a0a      	ldr	r2, [pc, #40]	; (8001038 <SysTick_Config+0x40>)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	3b01      	subs	r3, #1
 8001014:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001016:	210f      	movs	r1, #15
 8001018:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800101c:	f7ff ff8e 	bl	8000f3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001020:	4b05      	ldr	r3, [pc, #20]	; (8001038 <SysTick_Config+0x40>)
 8001022:	2200      	movs	r2, #0
 8001024:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001026:	4b04      	ldr	r3, [pc, #16]	; (8001038 <SysTick_Config+0x40>)
 8001028:	2207      	movs	r2, #7
 800102a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800102c:	2300      	movs	r3, #0
}
 800102e:	4618      	mov	r0, r3
 8001030:	3708      	adds	r7, #8
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	e000e010 	.word	0xe000e010

0800103c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001044:	6878      	ldr	r0, [r7, #4]
 8001046:	f7ff ff47 	bl	8000ed8 <__NVIC_SetPriorityGrouping>
}
 800104a:	bf00      	nop
 800104c:	3708      	adds	r7, #8
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}

08001052 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001052:	b580      	push	{r7, lr}
 8001054:	b086      	sub	sp, #24
 8001056:	af00      	add	r7, sp, #0
 8001058:	4603      	mov	r3, r0
 800105a:	60b9      	str	r1, [r7, #8]
 800105c:	607a      	str	r2, [r7, #4]
 800105e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001060:	2300      	movs	r3, #0
 8001062:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001064:	f7ff ff5c 	bl	8000f20 <__NVIC_GetPriorityGrouping>
 8001068:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800106a:	687a      	ldr	r2, [r7, #4]
 800106c:	68b9      	ldr	r1, [r7, #8]
 800106e:	6978      	ldr	r0, [r7, #20]
 8001070:	f7ff ff8e 	bl	8000f90 <NVIC_EncodePriority>
 8001074:	4602      	mov	r2, r0
 8001076:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800107a:	4611      	mov	r1, r2
 800107c:	4618      	mov	r0, r3
 800107e:	f7ff ff5d 	bl	8000f3c <__NVIC_SetPriority>
}
 8001082:	bf00      	nop
 8001084:	3718      	adds	r7, #24
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}

0800108a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800108a:	b580      	push	{r7, lr}
 800108c:	b082      	sub	sp, #8
 800108e:	af00      	add	r7, sp, #0
 8001090:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001092:	6878      	ldr	r0, [r7, #4]
 8001094:	f7ff ffb0 	bl	8000ff8 <SysTick_Config>
 8001098:	4603      	mov	r3, r0
}
 800109a:	4618      	mov	r0, r3
 800109c:	3708      	adds	r7, #8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
	...

080010a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b089      	sub	sp, #36	; 0x24
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
 80010ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010ae:	2300      	movs	r3, #0
 80010b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010b2:	2300      	movs	r3, #0
 80010b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010b6:	2300      	movs	r3, #0
 80010b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010ba:	2300      	movs	r3, #0
 80010bc:	61fb      	str	r3, [r7, #28]
 80010be:	e16b      	b.n	8001398 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010c0:	2201      	movs	r2, #1
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	fa02 f303 	lsl.w	r3, r2, r3
 80010c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	697a      	ldr	r2, [r7, #20]
 80010d0:	4013      	ands	r3, r2
 80010d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010d4:	693a      	ldr	r2, [r7, #16]
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	429a      	cmp	r2, r3
 80010da:	f040 815a 	bne.w	8001392 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	f003 0303 	and.w	r3, r3, #3
 80010e6:	2b01      	cmp	r3, #1
 80010e8:	d005      	beq.n	80010f6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010f2:	2b02      	cmp	r3, #2
 80010f4:	d130      	bne.n	8001158 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	689b      	ldr	r3, [r3, #8]
 80010fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010fc:	69fb      	ldr	r3, [r7, #28]
 80010fe:	005b      	lsls	r3, r3, #1
 8001100:	2203      	movs	r2, #3
 8001102:	fa02 f303 	lsl.w	r3, r2, r3
 8001106:	43db      	mvns	r3, r3
 8001108:	69ba      	ldr	r2, [r7, #24]
 800110a:	4013      	ands	r3, r2
 800110c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	68da      	ldr	r2, [r3, #12]
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	005b      	lsls	r3, r3, #1
 8001116:	fa02 f303 	lsl.w	r3, r2, r3
 800111a:	69ba      	ldr	r2, [r7, #24]
 800111c:	4313      	orrs	r3, r2
 800111e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	69ba      	ldr	r2, [r7, #24]
 8001124:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800112c:	2201      	movs	r2, #1
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	fa02 f303 	lsl.w	r3, r2, r3
 8001134:	43db      	mvns	r3, r3
 8001136:	69ba      	ldr	r2, [r7, #24]
 8001138:	4013      	ands	r3, r2
 800113a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	091b      	lsrs	r3, r3, #4
 8001142:	f003 0201 	and.w	r2, r3, #1
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	fa02 f303 	lsl.w	r3, r2, r3
 800114c:	69ba      	ldr	r2, [r7, #24]
 800114e:	4313      	orrs	r3, r2
 8001150:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	69ba      	ldr	r2, [r7, #24]
 8001156:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	f003 0303 	and.w	r3, r3, #3
 8001160:	2b03      	cmp	r3, #3
 8001162:	d017      	beq.n	8001194 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	68db      	ldr	r3, [r3, #12]
 8001168:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	005b      	lsls	r3, r3, #1
 800116e:	2203      	movs	r2, #3
 8001170:	fa02 f303 	lsl.w	r3, r2, r3
 8001174:	43db      	mvns	r3, r3
 8001176:	69ba      	ldr	r2, [r7, #24]
 8001178:	4013      	ands	r3, r2
 800117a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	689a      	ldr	r2, [r3, #8]
 8001180:	69fb      	ldr	r3, [r7, #28]
 8001182:	005b      	lsls	r3, r3, #1
 8001184:	fa02 f303 	lsl.w	r3, r2, r3
 8001188:	69ba      	ldr	r2, [r7, #24]
 800118a:	4313      	orrs	r3, r2
 800118c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	69ba      	ldr	r2, [r7, #24]
 8001192:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	f003 0303 	and.w	r3, r3, #3
 800119c:	2b02      	cmp	r3, #2
 800119e:	d123      	bne.n	80011e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011a0:	69fb      	ldr	r3, [r7, #28]
 80011a2:	08da      	lsrs	r2, r3, #3
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	3208      	adds	r2, #8
 80011a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	f003 0307 	and.w	r3, r3, #7
 80011b4:	009b      	lsls	r3, r3, #2
 80011b6:	220f      	movs	r2, #15
 80011b8:	fa02 f303 	lsl.w	r3, r2, r3
 80011bc:	43db      	mvns	r3, r3
 80011be:	69ba      	ldr	r2, [r7, #24]
 80011c0:	4013      	ands	r3, r2
 80011c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	691a      	ldr	r2, [r3, #16]
 80011c8:	69fb      	ldr	r3, [r7, #28]
 80011ca:	f003 0307 	and.w	r3, r3, #7
 80011ce:	009b      	lsls	r3, r3, #2
 80011d0:	fa02 f303 	lsl.w	r3, r2, r3
 80011d4:	69ba      	ldr	r2, [r7, #24]
 80011d6:	4313      	orrs	r3, r2
 80011d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	08da      	lsrs	r2, r3, #3
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	3208      	adds	r2, #8
 80011e2:	69b9      	ldr	r1, [r7, #24]
 80011e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	005b      	lsls	r3, r3, #1
 80011f2:	2203      	movs	r2, #3
 80011f4:	fa02 f303 	lsl.w	r3, r2, r3
 80011f8:	43db      	mvns	r3, r3
 80011fa:	69ba      	ldr	r2, [r7, #24]
 80011fc:	4013      	ands	r3, r2
 80011fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	f003 0203 	and.w	r2, r3, #3
 8001208:	69fb      	ldr	r3, [r7, #28]
 800120a:	005b      	lsls	r3, r3, #1
 800120c:	fa02 f303 	lsl.w	r3, r2, r3
 8001210:	69ba      	ldr	r2, [r7, #24]
 8001212:	4313      	orrs	r3, r2
 8001214:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	69ba      	ldr	r2, [r7, #24]
 800121a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001224:	2b00      	cmp	r3, #0
 8001226:	f000 80b4 	beq.w	8001392 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800122a:	2300      	movs	r3, #0
 800122c:	60fb      	str	r3, [r7, #12]
 800122e:	4b60      	ldr	r3, [pc, #384]	; (80013b0 <HAL_GPIO_Init+0x30c>)
 8001230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001232:	4a5f      	ldr	r2, [pc, #380]	; (80013b0 <HAL_GPIO_Init+0x30c>)
 8001234:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001238:	6453      	str	r3, [r2, #68]	; 0x44
 800123a:	4b5d      	ldr	r3, [pc, #372]	; (80013b0 <HAL_GPIO_Init+0x30c>)
 800123c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800123e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001242:	60fb      	str	r3, [r7, #12]
 8001244:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001246:	4a5b      	ldr	r2, [pc, #364]	; (80013b4 <HAL_GPIO_Init+0x310>)
 8001248:	69fb      	ldr	r3, [r7, #28]
 800124a:	089b      	lsrs	r3, r3, #2
 800124c:	3302      	adds	r3, #2
 800124e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001252:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001254:	69fb      	ldr	r3, [r7, #28]
 8001256:	f003 0303 	and.w	r3, r3, #3
 800125a:	009b      	lsls	r3, r3, #2
 800125c:	220f      	movs	r2, #15
 800125e:	fa02 f303 	lsl.w	r3, r2, r3
 8001262:	43db      	mvns	r3, r3
 8001264:	69ba      	ldr	r2, [r7, #24]
 8001266:	4013      	ands	r3, r2
 8001268:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	4a52      	ldr	r2, [pc, #328]	; (80013b8 <HAL_GPIO_Init+0x314>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d02b      	beq.n	80012ca <HAL_GPIO_Init+0x226>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	4a51      	ldr	r2, [pc, #324]	; (80013bc <HAL_GPIO_Init+0x318>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d025      	beq.n	80012c6 <HAL_GPIO_Init+0x222>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	4a50      	ldr	r2, [pc, #320]	; (80013c0 <HAL_GPIO_Init+0x31c>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d01f      	beq.n	80012c2 <HAL_GPIO_Init+0x21e>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	4a4f      	ldr	r2, [pc, #316]	; (80013c4 <HAL_GPIO_Init+0x320>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d019      	beq.n	80012be <HAL_GPIO_Init+0x21a>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	4a4e      	ldr	r2, [pc, #312]	; (80013c8 <HAL_GPIO_Init+0x324>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d013      	beq.n	80012ba <HAL_GPIO_Init+0x216>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	4a4d      	ldr	r2, [pc, #308]	; (80013cc <HAL_GPIO_Init+0x328>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d00d      	beq.n	80012b6 <HAL_GPIO_Init+0x212>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4a4c      	ldr	r2, [pc, #304]	; (80013d0 <HAL_GPIO_Init+0x32c>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d007      	beq.n	80012b2 <HAL_GPIO_Init+0x20e>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	4a4b      	ldr	r2, [pc, #300]	; (80013d4 <HAL_GPIO_Init+0x330>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d101      	bne.n	80012ae <HAL_GPIO_Init+0x20a>
 80012aa:	2307      	movs	r3, #7
 80012ac:	e00e      	b.n	80012cc <HAL_GPIO_Init+0x228>
 80012ae:	2308      	movs	r3, #8
 80012b0:	e00c      	b.n	80012cc <HAL_GPIO_Init+0x228>
 80012b2:	2306      	movs	r3, #6
 80012b4:	e00a      	b.n	80012cc <HAL_GPIO_Init+0x228>
 80012b6:	2305      	movs	r3, #5
 80012b8:	e008      	b.n	80012cc <HAL_GPIO_Init+0x228>
 80012ba:	2304      	movs	r3, #4
 80012bc:	e006      	b.n	80012cc <HAL_GPIO_Init+0x228>
 80012be:	2303      	movs	r3, #3
 80012c0:	e004      	b.n	80012cc <HAL_GPIO_Init+0x228>
 80012c2:	2302      	movs	r3, #2
 80012c4:	e002      	b.n	80012cc <HAL_GPIO_Init+0x228>
 80012c6:	2301      	movs	r3, #1
 80012c8:	e000      	b.n	80012cc <HAL_GPIO_Init+0x228>
 80012ca:	2300      	movs	r3, #0
 80012cc:	69fa      	ldr	r2, [r7, #28]
 80012ce:	f002 0203 	and.w	r2, r2, #3
 80012d2:	0092      	lsls	r2, r2, #2
 80012d4:	4093      	lsls	r3, r2
 80012d6:	69ba      	ldr	r2, [r7, #24]
 80012d8:	4313      	orrs	r3, r2
 80012da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012dc:	4935      	ldr	r1, [pc, #212]	; (80013b4 <HAL_GPIO_Init+0x310>)
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	089b      	lsrs	r3, r3, #2
 80012e2:	3302      	adds	r3, #2
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012ea:	4b3b      	ldr	r3, [pc, #236]	; (80013d8 <HAL_GPIO_Init+0x334>)
 80012ec:	689b      	ldr	r3, [r3, #8]
 80012ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012f0:	693b      	ldr	r3, [r7, #16]
 80012f2:	43db      	mvns	r3, r3
 80012f4:	69ba      	ldr	r2, [r7, #24]
 80012f6:	4013      	ands	r3, r2
 80012f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001302:	2b00      	cmp	r3, #0
 8001304:	d003      	beq.n	800130e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001306:	69ba      	ldr	r2, [r7, #24]
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	4313      	orrs	r3, r2
 800130c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800130e:	4a32      	ldr	r2, [pc, #200]	; (80013d8 <HAL_GPIO_Init+0x334>)
 8001310:	69bb      	ldr	r3, [r7, #24]
 8001312:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001314:	4b30      	ldr	r3, [pc, #192]	; (80013d8 <HAL_GPIO_Init+0x334>)
 8001316:	68db      	ldr	r3, [r3, #12]
 8001318:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800131a:	693b      	ldr	r3, [r7, #16]
 800131c:	43db      	mvns	r3, r3
 800131e:	69ba      	ldr	r2, [r7, #24]
 8001320:	4013      	ands	r3, r2
 8001322:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800132c:	2b00      	cmp	r3, #0
 800132e:	d003      	beq.n	8001338 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001330:	69ba      	ldr	r2, [r7, #24]
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	4313      	orrs	r3, r2
 8001336:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001338:	4a27      	ldr	r2, [pc, #156]	; (80013d8 <HAL_GPIO_Init+0x334>)
 800133a:	69bb      	ldr	r3, [r7, #24]
 800133c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800133e:	4b26      	ldr	r3, [pc, #152]	; (80013d8 <HAL_GPIO_Init+0x334>)
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	43db      	mvns	r3, r3
 8001348:	69ba      	ldr	r2, [r7, #24]
 800134a:	4013      	ands	r3, r2
 800134c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001356:	2b00      	cmp	r3, #0
 8001358:	d003      	beq.n	8001362 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800135a:	69ba      	ldr	r2, [r7, #24]
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	4313      	orrs	r3, r2
 8001360:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001362:	4a1d      	ldr	r2, [pc, #116]	; (80013d8 <HAL_GPIO_Init+0x334>)
 8001364:	69bb      	ldr	r3, [r7, #24]
 8001366:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001368:	4b1b      	ldr	r3, [pc, #108]	; (80013d8 <HAL_GPIO_Init+0x334>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800136e:	693b      	ldr	r3, [r7, #16]
 8001370:	43db      	mvns	r3, r3
 8001372:	69ba      	ldr	r2, [r7, #24]
 8001374:	4013      	ands	r3, r2
 8001376:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001380:	2b00      	cmp	r3, #0
 8001382:	d003      	beq.n	800138c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001384:	69ba      	ldr	r2, [r7, #24]
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	4313      	orrs	r3, r2
 800138a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800138c:	4a12      	ldr	r2, [pc, #72]	; (80013d8 <HAL_GPIO_Init+0x334>)
 800138e:	69bb      	ldr	r3, [r7, #24]
 8001390:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	3301      	adds	r3, #1
 8001396:	61fb      	str	r3, [r7, #28]
 8001398:	69fb      	ldr	r3, [r7, #28]
 800139a:	2b0f      	cmp	r3, #15
 800139c:	f67f ae90 	bls.w	80010c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013a0:	bf00      	nop
 80013a2:	bf00      	nop
 80013a4:	3724      	adds	r7, #36	; 0x24
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	40023800 	.word	0x40023800
 80013b4:	40013800 	.word	0x40013800
 80013b8:	40020000 	.word	0x40020000
 80013bc:	40020400 	.word	0x40020400
 80013c0:	40020800 	.word	0x40020800
 80013c4:	40020c00 	.word	0x40020c00
 80013c8:	40021000 	.word	0x40021000
 80013cc:	40021400 	.word	0x40021400
 80013d0:	40021800 	.word	0x40021800
 80013d4:	40021c00 	.word	0x40021c00
 80013d8:	40013c00 	.word	0x40013c00

080013dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
 80013e4:	460b      	mov	r3, r1
 80013e6:	807b      	strh	r3, [r7, #2]
 80013e8:	4613      	mov	r3, r2
 80013ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013ec:	787b      	ldrb	r3, [r7, #1]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d003      	beq.n	80013fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013f2:	887a      	ldrh	r2, [r7, #2]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013f8:	e003      	b.n	8001402 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013fa:	887b      	ldrh	r3, [r7, #2]
 80013fc:	041a      	lsls	r2, r3, #16
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	619a      	str	r2, [r3, #24]
}
 8001402:	bf00      	nop
 8001404:	370c      	adds	r7, #12
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr

0800140e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800140e:	b480      	push	{r7}
 8001410:	b085      	sub	sp, #20
 8001412:	af00      	add	r7, sp, #0
 8001414:	6078      	str	r0, [r7, #4]
 8001416:	460b      	mov	r3, r1
 8001418:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	695b      	ldr	r3, [r3, #20]
 800141e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001420:	887a      	ldrh	r2, [r7, #2]
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	4013      	ands	r3, r2
 8001426:	041a      	lsls	r2, r3, #16
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	43d9      	mvns	r1, r3
 800142c:	887b      	ldrh	r3, [r7, #2]
 800142e:	400b      	ands	r3, r1
 8001430:	431a      	orrs	r2, r3
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	619a      	str	r2, [r3, #24]
}
 8001436:	bf00      	nop
 8001438:	3714      	adds	r7, #20
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
	...

08001444 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b086      	sub	sp, #24
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d101      	bne.n	8001456 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001452:	2301      	movs	r3, #1
 8001454:	e267      	b.n	8001926 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f003 0301 	and.w	r3, r3, #1
 800145e:	2b00      	cmp	r3, #0
 8001460:	d075      	beq.n	800154e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001462:	4b88      	ldr	r3, [pc, #544]	; (8001684 <HAL_RCC_OscConfig+0x240>)
 8001464:	689b      	ldr	r3, [r3, #8]
 8001466:	f003 030c 	and.w	r3, r3, #12
 800146a:	2b04      	cmp	r3, #4
 800146c:	d00c      	beq.n	8001488 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800146e:	4b85      	ldr	r3, [pc, #532]	; (8001684 <HAL_RCC_OscConfig+0x240>)
 8001470:	689b      	ldr	r3, [r3, #8]
 8001472:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001476:	2b08      	cmp	r3, #8
 8001478:	d112      	bne.n	80014a0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800147a:	4b82      	ldr	r3, [pc, #520]	; (8001684 <HAL_RCC_OscConfig+0x240>)
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001482:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001486:	d10b      	bne.n	80014a0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001488:	4b7e      	ldr	r3, [pc, #504]	; (8001684 <HAL_RCC_OscConfig+0x240>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001490:	2b00      	cmp	r3, #0
 8001492:	d05b      	beq.n	800154c <HAL_RCC_OscConfig+0x108>
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d157      	bne.n	800154c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800149c:	2301      	movs	r3, #1
 800149e:	e242      	b.n	8001926 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014a8:	d106      	bne.n	80014b8 <HAL_RCC_OscConfig+0x74>
 80014aa:	4b76      	ldr	r3, [pc, #472]	; (8001684 <HAL_RCC_OscConfig+0x240>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4a75      	ldr	r2, [pc, #468]	; (8001684 <HAL_RCC_OscConfig+0x240>)
 80014b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014b4:	6013      	str	r3, [r2, #0]
 80014b6:	e01d      	b.n	80014f4 <HAL_RCC_OscConfig+0xb0>
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014c0:	d10c      	bne.n	80014dc <HAL_RCC_OscConfig+0x98>
 80014c2:	4b70      	ldr	r3, [pc, #448]	; (8001684 <HAL_RCC_OscConfig+0x240>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a6f      	ldr	r2, [pc, #444]	; (8001684 <HAL_RCC_OscConfig+0x240>)
 80014c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014cc:	6013      	str	r3, [r2, #0]
 80014ce:	4b6d      	ldr	r3, [pc, #436]	; (8001684 <HAL_RCC_OscConfig+0x240>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4a6c      	ldr	r2, [pc, #432]	; (8001684 <HAL_RCC_OscConfig+0x240>)
 80014d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014d8:	6013      	str	r3, [r2, #0]
 80014da:	e00b      	b.n	80014f4 <HAL_RCC_OscConfig+0xb0>
 80014dc:	4b69      	ldr	r3, [pc, #420]	; (8001684 <HAL_RCC_OscConfig+0x240>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a68      	ldr	r2, [pc, #416]	; (8001684 <HAL_RCC_OscConfig+0x240>)
 80014e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014e6:	6013      	str	r3, [r2, #0]
 80014e8:	4b66      	ldr	r3, [pc, #408]	; (8001684 <HAL_RCC_OscConfig+0x240>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a65      	ldr	r2, [pc, #404]	; (8001684 <HAL_RCC_OscConfig+0x240>)
 80014ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d013      	beq.n	8001524 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014fc:	f7ff fcbc 	bl	8000e78 <HAL_GetTick>
 8001500:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001502:	e008      	b.n	8001516 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001504:	f7ff fcb8 	bl	8000e78 <HAL_GetTick>
 8001508:	4602      	mov	r2, r0
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	2b64      	cmp	r3, #100	; 0x64
 8001510:	d901      	bls.n	8001516 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001512:	2303      	movs	r3, #3
 8001514:	e207      	b.n	8001926 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001516:	4b5b      	ldr	r3, [pc, #364]	; (8001684 <HAL_RCC_OscConfig+0x240>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800151e:	2b00      	cmp	r3, #0
 8001520:	d0f0      	beq.n	8001504 <HAL_RCC_OscConfig+0xc0>
 8001522:	e014      	b.n	800154e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001524:	f7ff fca8 	bl	8000e78 <HAL_GetTick>
 8001528:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800152a:	e008      	b.n	800153e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800152c:	f7ff fca4 	bl	8000e78 <HAL_GetTick>
 8001530:	4602      	mov	r2, r0
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	2b64      	cmp	r3, #100	; 0x64
 8001538:	d901      	bls.n	800153e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800153a:	2303      	movs	r3, #3
 800153c:	e1f3      	b.n	8001926 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800153e:	4b51      	ldr	r3, [pc, #324]	; (8001684 <HAL_RCC_OscConfig+0x240>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001546:	2b00      	cmp	r3, #0
 8001548:	d1f0      	bne.n	800152c <HAL_RCC_OscConfig+0xe8>
 800154a:	e000      	b.n	800154e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800154c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f003 0302 	and.w	r3, r3, #2
 8001556:	2b00      	cmp	r3, #0
 8001558:	d063      	beq.n	8001622 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800155a:	4b4a      	ldr	r3, [pc, #296]	; (8001684 <HAL_RCC_OscConfig+0x240>)
 800155c:	689b      	ldr	r3, [r3, #8]
 800155e:	f003 030c 	and.w	r3, r3, #12
 8001562:	2b00      	cmp	r3, #0
 8001564:	d00b      	beq.n	800157e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001566:	4b47      	ldr	r3, [pc, #284]	; (8001684 <HAL_RCC_OscConfig+0x240>)
 8001568:	689b      	ldr	r3, [r3, #8]
 800156a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800156e:	2b08      	cmp	r3, #8
 8001570:	d11c      	bne.n	80015ac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001572:	4b44      	ldr	r3, [pc, #272]	; (8001684 <HAL_RCC_OscConfig+0x240>)
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800157a:	2b00      	cmp	r3, #0
 800157c:	d116      	bne.n	80015ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800157e:	4b41      	ldr	r3, [pc, #260]	; (8001684 <HAL_RCC_OscConfig+0x240>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f003 0302 	and.w	r3, r3, #2
 8001586:	2b00      	cmp	r3, #0
 8001588:	d005      	beq.n	8001596 <HAL_RCC_OscConfig+0x152>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	68db      	ldr	r3, [r3, #12]
 800158e:	2b01      	cmp	r3, #1
 8001590:	d001      	beq.n	8001596 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001592:	2301      	movs	r3, #1
 8001594:	e1c7      	b.n	8001926 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001596:	4b3b      	ldr	r3, [pc, #236]	; (8001684 <HAL_RCC_OscConfig+0x240>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	691b      	ldr	r3, [r3, #16]
 80015a2:	00db      	lsls	r3, r3, #3
 80015a4:	4937      	ldr	r1, [pc, #220]	; (8001684 <HAL_RCC_OscConfig+0x240>)
 80015a6:	4313      	orrs	r3, r2
 80015a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015aa:	e03a      	b.n	8001622 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	68db      	ldr	r3, [r3, #12]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d020      	beq.n	80015f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015b4:	4b34      	ldr	r3, [pc, #208]	; (8001688 <HAL_RCC_OscConfig+0x244>)
 80015b6:	2201      	movs	r2, #1
 80015b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015ba:	f7ff fc5d 	bl	8000e78 <HAL_GetTick>
 80015be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015c0:	e008      	b.n	80015d4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015c2:	f7ff fc59 	bl	8000e78 <HAL_GetTick>
 80015c6:	4602      	mov	r2, r0
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	1ad3      	subs	r3, r2, r3
 80015cc:	2b02      	cmp	r3, #2
 80015ce:	d901      	bls.n	80015d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80015d0:	2303      	movs	r3, #3
 80015d2:	e1a8      	b.n	8001926 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015d4:	4b2b      	ldr	r3, [pc, #172]	; (8001684 <HAL_RCC_OscConfig+0x240>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f003 0302 	and.w	r3, r3, #2
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d0f0      	beq.n	80015c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015e0:	4b28      	ldr	r3, [pc, #160]	; (8001684 <HAL_RCC_OscConfig+0x240>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	691b      	ldr	r3, [r3, #16]
 80015ec:	00db      	lsls	r3, r3, #3
 80015ee:	4925      	ldr	r1, [pc, #148]	; (8001684 <HAL_RCC_OscConfig+0x240>)
 80015f0:	4313      	orrs	r3, r2
 80015f2:	600b      	str	r3, [r1, #0]
 80015f4:	e015      	b.n	8001622 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015f6:	4b24      	ldr	r3, [pc, #144]	; (8001688 <HAL_RCC_OscConfig+0x244>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015fc:	f7ff fc3c 	bl	8000e78 <HAL_GetTick>
 8001600:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001602:	e008      	b.n	8001616 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001604:	f7ff fc38 	bl	8000e78 <HAL_GetTick>
 8001608:	4602      	mov	r2, r0
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	2b02      	cmp	r3, #2
 8001610:	d901      	bls.n	8001616 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001612:	2303      	movs	r3, #3
 8001614:	e187      	b.n	8001926 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001616:	4b1b      	ldr	r3, [pc, #108]	; (8001684 <HAL_RCC_OscConfig+0x240>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f003 0302 	and.w	r3, r3, #2
 800161e:	2b00      	cmp	r3, #0
 8001620:	d1f0      	bne.n	8001604 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f003 0308 	and.w	r3, r3, #8
 800162a:	2b00      	cmp	r3, #0
 800162c:	d036      	beq.n	800169c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	695b      	ldr	r3, [r3, #20]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d016      	beq.n	8001664 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001636:	4b15      	ldr	r3, [pc, #84]	; (800168c <HAL_RCC_OscConfig+0x248>)
 8001638:	2201      	movs	r2, #1
 800163a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800163c:	f7ff fc1c 	bl	8000e78 <HAL_GetTick>
 8001640:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001642:	e008      	b.n	8001656 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001644:	f7ff fc18 	bl	8000e78 <HAL_GetTick>
 8001648:	4602      	mov	r2, r0
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	2b02      	cmp	r3, #2
 8001650:	d901      	bls.n	8001656 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001652:	2303      	movs	r3, #3
 8001654:	e167      	b.n	8001926 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001656:	4b0b      	ldr	r3, [pc, #44]	; (8001684 <HAL_RCC_OscConfig+0x240>)
 8001658:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800165a:	f003 0302 	and.w	r3, r3, #2
 800165e:	2b00      	cmp	r3, #0
 8001660:	d0f0      	beq.n	8001644 <HAL_RCC_OscConfig+0x200>
 8001662:	e01b      	b.n	800169c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001664:	4b09      	ldr	r3, [pc, #36]	; (800168c <HAL_RCC_OscConfig+0x248>)
 8001666:	2200      	movs	r2, #0
 8001668:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800166a:	f7ff fc05 	bl	8000e78 <HAL_GetTick>
 800166e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001670:	e00e      	b.n	8001690 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001672:	f7ff fc01 	bl	8000e78 <HAL_GetTick>
 8001676:	4602      	mov	r2, r0
 8001678:	693b      	ldr	r3, [r7, #16]
 800167a:	1ad3      	subs	r3, r2, r3
 800167c:	2b02      	cmp	r3, #2
 800167e:	d907      	bls.n	8001690 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001680:	2303      	movs	r3, #3
 8001682:	e150      	b.n	8001926 <HAL_RCC_OscConfig+0x4e2>
 8001684:	40023800 	.word	0x40023800
 8001688:	42470000 	.word	0x42470000
 800168c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001690:	4b88      	ldr	r3, [pc, #544]	; (80018b4 <HAL_RCC_OscConfig+0x470>)
 8001692:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001694:	f003 0302 	and.w	r3, r3, #2
 8001698:	2b00      	cmp	r3, #0
 800169a:	d1ea      	bne.n	8001672 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f003 0304 	and.w	r3, r3, #4
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	f000 8097 	beq.w	80017d8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016aa:	2300      	movs	r3, #0
 80016ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016ae:	4b81      	ldr	r3, [pc, #516]	; (80018b4 <HAL_RCC_OscConfig+0x470>)
 80016b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d10f      	bne.n	80016da <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016ba:	2300      	movs	r3, #0
 80016bc:	60bb      	str	r3, [r7, #8]
 80016be:	4b7d      	ldr	r3, [pc, #500]	; (80018b4 <HAL_RCC_OscConfig+0x470>)
 80016c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c2:	4a7c      	ldr	r2, [pc, #496]	; (80018b4 <HAL_RCC_OscConfig+0x470>)
 80016c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016c8:	6413      	str	r3, [r2, #64]	; 0x40
 80016ca:	4b7a      	ldr	r3, [pc, #488]	; (80018b4 <HAL_RCC_OscConfig+0x470>)
 80016cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016d2:	60bb      	str	r3, [r7, #8]
 80016d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016d6:	2301      	movs	r3, #1
 80016d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016da:	4b77      	ldr	r3, [pc, #476]	; (80018b8 <HAL_RCC_OscConfig+0x474>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d118      	bne.n	8001718 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016e6:	4b74      	ldr	r3, [pc, #464]	; (80018b8 <HAL_RCC_OscConfig+0x474>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a73      	ldr	r2, [pc, #460]	; (80018b8 <HAL_RCC_OscConfig+0x474>)
 80016ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016f2:	f7ff fbc1 	bl	8000e78 <HAL_GetTick>
 80016f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016f8:	e008      	b.n	800170c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016fa:	f7ff fbbd 	bl	8000e78 <HAL_GetTick>
 80016fe:	4602      	mov	r2, r0
 8001700:	693b      	ldr	r3, [r7, #16]
 8001702:	1ad3      	subs	r3, r2, r3
 8001704:	2b02      	cmp	r3, #2
 8001706:	d901      	bls.n	800170c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001708:	2303      	movs	r3, #3
 800170a:	e10c      	b.n	8001926 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800170c:	4b6a      	ldr	r3, [pc, #424]	; (80018b8 <HAL_RCC_OscConfig+0x474>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001714:	2b00      	cmp	r3, #0
 8001716:	d0f0      	beq.n	80016fa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	2b01      	cmp	r3, #1
 800171e:	d106      	bne.n	800172e <HAL_RCC_OscConfig+0x2ea>
 8001720:	4b64      	ldr	r3, [pc, #400]	; (80018b4 <HAL_RCC_OscConfig+0x470>)
 8001722:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001724:	4a63      	ldr	r2, [pc, #396]	; (80018b4 <HAL_RCC_OscConfig+0x470>)
 8001726:	f043 0301 	orr.w	r3, r3, #1
 800172a:	6713      	str	r3, [r2, #112]	; 0x70
 800172c:	e01c      	b.n	8001768 <HAL_RCC_OscConfig+0x324>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	689b      	ldr	r3, [r3, #8]
 8001732:	2b05      	cmp	r3, #5
 8001734:	d10c      	bne.n	8001750 <HAL_RCC_OscConfig+0x30c>
 8001736:	4b5f      	ldr	r3, [pc, #380]	; (80018b4 <HAL_RCC_OscConfig+0x470>)
 8001738:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800173a:	4a5e      	ldr	r2, [pc, #376]	; (80018b4 <HAL_RCC_OscConfig+0x470>)
 800173c:	f043 0304 	orr.w	r3, r3, #4
 8001740:	6713      	str	r3, [r2, #112]	; 0x70
 8001742:	4b5c      	ldr	r3, [pc, #368]	; (80018b4 <HAL_RCC_OscConfig+0x470>)
 8001744:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001746:	4a5b      	ldr	r2, [pc, #364]	; (80018b4 <HAL_RCC_OscConfig+0x470>)
 8001748:	f043 0301 	orr.w	r3, r3, #1
 800174c:	6713      	str	r3, [r2, #112]	; 0x70
 800174e:	e00b      	b.n	8001768 <HAL_RCC_OscConfig+0x324>
 8001750:	4b58      	ldr	r3, [pc, #352]	; (80018b4 <HAL_RCC_OscConfig+0x470>)
 8001752:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001754:	4a57      	ldr	r2, [pc, #348]	; (80018b4 <HAL_RCC_OscConfig+0x470>)
 8001756:	f023 0301 	bic.w	r3, r3, #1
 800175a:	6713      	str	r3, [r2, #112]	; 0x70
 800175c:	4b55      	ldr	r3, [pc, #340]	; (80018b4 <HAL_RCC_OscConfig+0x470>)
 800175e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001760:	4a54      	ldr	r2, [pc, #336]	; (80018b4 <HAL_RCC_OscConfig+0x470>)
 8001762:	f023 0304 	bic.w	r3, r3, #4
 8001766:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d015      	beq.n	800179c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001770:	f7ff fb82 	bl	8000e78 <HAL_GetTick>
 8001774:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001776:	e00a      	b.n	800178e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001778:	f7ff fb7e 	bl	8000e78 <HAL_GetTick>
 800177c:	4602      	mov	r2, r0
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	f241 3288 	movw	r2, #5000	; 0x1388
 8001786:	4293      	cmp	r3, r2
 8001788:	d901      	bls.n	800178e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800178a:	2303      	movs	r3, #3
 800178c:	e0cb      	b.n	8001926 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800178e:	4b49      	ldr	r3, [pc, #292]	; (80018b4 <HAL_RCC_OscConfig+0x470>)
 8001790:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001792:	f003 0302 	and.w	r3, r3, #2
 8001796:	2b00      	cmp	r3, #0
 8001798:	d0ee      	beq.n	8001778 <HAL_RCC_OscConfig+0x334>
 800179a:	e014      	b.n	80017c6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800179c:	f7ff fb6c 	bl	8000e78 <HAL_GetTick>
 80017a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017a2:	e00a      	b.n	80017ba <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017a4:	f7ff fb68 	bl	8000e78 <HAL_GetTick>
 80017a8:	4602      	mov	r2, r0
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d901      	bls.n	80017ba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80017b6:	2303      	movs	r3, #3
 80017b8:	e0b5      	b.n	8001926 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017ba:	4b3e      	ldr	r3, [pc, #248]	; (80018b4 <HAL_RCC_OscConfig+0x470>)
 80017bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017be:	f003 0302 	and.w	r3, r3, #2
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d1ee      	bne.n	80017a4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80017c6:	7dfb      	ldrb	r3, [r7, #23]
 80017c8:	2b01      	cmp	r3, #1
 80017ca:	d105      	bne.n	80017d8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017cc:	4b39      	ldr	r3, [pc, #228]	; (80018b4 <HAL_RCC_OscConfig+0x470>)
 80017ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d0:	4a38      	ldr	r2, [pc, #224]	; (80018b4 <HAL_RCC_OscConfig+0x470>)
 80017d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017d6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	699b      	ldr	r3, [r3, #24]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	f000 80a1 	beq.w	8001924 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80017e2:	4b34      	ldr	r3, [pc, #208]	; (80018b4 <HAL_RCC_OscConfig+0x470>)
 80017e4:	689b      	ldr	r3, [r3, #8]
 80017e6:	f003 030c 	and.w	r3, r3, #12
 80017ea:	2b08      	cmp	r3, #8
 80017ec:	d05c      	beq.n	80018a8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	699b      	ldr	r3, [r3, #24]
 80017f2:	2b02      	cmp	r3, #2
 80017f4:	d141      	bne.n	800187a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017f6:	4b31      	ldr	r3, [pc, #196]	; (80018bc <HAL_RCC_OscConfig+0x478>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017fc:	f7ff fb3c 	bl	8000e78 <HAL_GetTick>
 8001800:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001802:	e008      	b.n	8001816 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001804:	f7ff fb38 	bl	8000e78 <HAL_GetTick>
 8001808:	4602      	mov	r2, r0
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	1ad3      	subs	r3, r2, r3
 800180e:	2b02      	cmp	r3, #2
 8001810:	d901      	bls.n	8001816 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001812:	2303      	movs	r3, #3
 8001814:	e087      	b.n	8001926 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001816:	4b27      	ldr	r3, [pc, #156]	; (80018b4 <HAL_RCC_OscConfig+0x470>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800181e:	2b00      	cmp	r3, #0
 8001820:	d1f0      	bne.n	8001804 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	69da      	ldr	r2, [r3, #28]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6a1b      	ldr	r3, [r3, #32]
 800182a:	431a      	orrs	r2, r3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001830:	019b      	lsls	r3, r3, #6
 8001832:	431a      	orrs	r2, r3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001838:	085b      	lsrs	r3, r3, #1
 800183a:	3b01      	subs	r3, #1
 800183c:	041b      	lsls	r3, r3, #16
 800183e:	431a      	orrs	r2, r3
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001844:	061b      	lsls	r3, r3, #24
 8001846:	491b      	ldr	r1, [pc, #108]	; (80018b4 <HAL_RCC_OscConfig+0x470>)
 8001848:	4313      	orrs	r3, r2
 800184a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800184c:	4b1b      	ldr	r3, [pc, #108]	; (80018bc <HAL_RCC_OscConfig+0x478>)
 800184e:	2201      	movs	r2, #1
 8001850:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001852:	f7ff fb11 	bl	8000e78 <HAL_GetTick>
 8001856:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001858:	e008      	b.n	800186c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800185a:	f7ff fb0d 	bl	8000e78 <HAL_GetTick>
 800185e:	4602      	mov	r2, r0
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	1ad3      	subs	r3, r2, r3
 8001864:	2b02      	cmp	r3, #2
 8001866:	d901      	bls.n	800186c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001868:	2303      	movs	r3, #3
 800186a:	e05c      	b.n	8001926 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800186c:	4b11      	ldr	r3, [pc, #68]	; (80018b4 <HAL_RCC_OscConfig+0x470>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001874:	2b00      	cmp	r3, #0
 8001876:	d0f0      	beq.n	800185a <HAL_RCC_OscConfig+0x416>
 8001878:	e054      	b.n	8001924 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800187a:	4b10      	ldr	r3, [pc, #64]	; (80018bc <HAL_RCC_OscConfig+0x478>)
 800187c:	2200      	movs	r2, #0
 800187e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001880:	f7ff fafa 	bl	8000e78 <HAL_GetTick>
 8001884:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001886:	e008      	b.n	800189a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001888:	f7ff faf6 	bl	8000e78 <HAL_GetTick>
 800188c:	4602      	mov	r2, r0
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	2b02      	cmp	r3, #2
 8001894:	d901      	bls.n	800189a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001896:	2303      	movs	r3, #3
 8001898:	e045      	b.n	8001926 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800189a:	4b06      	ldr	r3, [pc, #24]	; (80018b4 <HAL_RCC_OscConfig+0x470>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d1f0      	bne.n	8001888 <HAL_RCC_OscConfig+0x444>
 80018a6:	e03d      	b.n	8001924 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	699b      	ldr	r3, [r3, #24]
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	d107      	bne.n	80018c0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80018b0:	2301      	movs	r3, #1
 80018b2:	e038      	b.n	8001926 <HAL_RCC_OscConfig+0x4e2>
 80018b4:	40023800 	.word	0x40023800
 80018b8:	40007000 	.word	0x40007000
 80018bc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80018c0:	4b1b      	ldr	r3, [pc, #108]	; (8001930 <HAL_RCC_OscConfig+0x4ec>)
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	699b      	ldr	r3, [r3, #24]
 80018ca:	2b01      	cmp	r3, #1
 80018cc:	d028      	beq.n	8001920 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018d8:	429a      	cmp	r2, r3
 80018da:	d121      	bne.n	8001920 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018e6:	429a      	cmp	r2, r3
 80018e8:	d11a      	bne.n	8001920 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018ea:	68fa      	ldr	r2, [r7, #12]
 80018ec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80018f0:	4013      	ands	r3, r2
 80018f2:	687a      	ldr	r2, [r7, #4]
 80018f4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80018f6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d111      	bne.n	8001920 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001906:	085b      	lsrs	r3, r3, #1
 8001908:	3b01      	subs	r3, #1
 800190a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800190c:	429a      	cmp	r2, r3
 800190e:	d107      	bne.n	8001920 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800191a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800191c:	429a      	cmp	r2, r3
 800191e:	d001      	beq.n	8001924 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001920:	2301      	movs	r3, #1
 8001922:	e000      	b.n	8001926 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001924:	2300      	movs	r3, #0
}
 8001926:	4618      	mov	r0, r3
 8001928:	3718      	adds	r7, #24
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	40023800 	.word	0x40023800

08001934 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b084      	sub	sp, #16
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
 800193c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d101      	bne.n	8001948 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001944:	2301      	movs	r3, #1
 8001946:	e0cc      	b.n	8001ae2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001948:	4b68      	ldr	r3, [pc, #416]	; (8001aec <HAL_RCC_ClockConfig+0x1b8>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f003 0307 	and.w	r3, r3, #7
 8001950:	683a      	ldr	r2, [r7, #0]
 8001952:	429a      	cmp	r2, r3
 8001954:	d90c      	bls.n	8001970 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001956:	4b65      	ldr	r3, [pc, #404]	; (8001aec <HAL_RCC_ClockConfig+0x1b8>)
 8001958:	683a      	ldr	r2, [r7, #0]
 800195a:	b2d2      	uxtb	r2, r2
 800195c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800195e:	4b63      	ldr	r3, [pc, #396]	; (8001aec <HAL_RCC_ClockConfig+0x1b8>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 0307 	and.w	r3, r3, #7
 8001966:	683a      	ldr	r2, [r7, #0]
 8001968:	429a      	cmp	r2, r3
 800196a:	d001      	beq.n	8001970 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800196c:	2301      	movs	r3, #1
 800196e:	e0b8      	b.n	8001ae2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f003 0302 	and.w	r3, r3, #2
 8001978:	2b00      	cmp	r3, #0
 800197a:	d020      	beq.n	80019be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f003 0304 	and.w	r3, r3, #4
 8001984:	2b00      	cmp	r3, #0
 8001986:	d005      	beq.n	8001994 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001988:	4b59      	ldr	r3, [pc, #356]	; (8001af0 <HAL_RCC_ClockConfig+0x1bc>)
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	4a58      	ldr	r2, [pc, #352]	; (8001af0 <HAL_RCC_ClockConfig+0x1bc>)
 800198e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001992:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f003 0308 	and.w	r3, r3, #8
 800199c:	2b00      	cmp	r3, #0
 800199e:	d005      	beq.n	80019ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019a0:	4b53      	ldr	r3, [pc, #332]	; (8001af0 <HAL_RCC_ClockConfig+0x1bc>)
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	4a52      	ldr	r2, [pc, #328]	; (8001af0 <HAL_RCC_ClockConfig+0x1bc>)
 80019a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80019aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019ac:	4b50      	ldr	r3, [pc, #320]	; (8001af0 <HAL_RCC_ClockConfig+0x1bc>)
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	494d      	ldr	r1, [pc, #308]	; (8001af0 <HAL_RCC_ClockConfig+0x1bc>)
 80019ba:	4313      	orrs	r3, r2
 80019bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f003 0301 	and.w	r3, r3, #1
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d044      	beq.n	8001a54 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d107      	bne.n	80019e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019d2:	4b47      	ldr	r3, [pc, #284]	; (8001af0 <HAL_RCC_ClockConfig+0x1bc>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d119      	bne.n	8001a12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	e07f      	b.n	8001ae2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	2b02      	cmp	r3, #2
 80019e8:	d003      	beq.n	80019f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019ee:	2b03      	cmp	r3, #3
 80019f0:	d107      	bne.n	8001a02 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019f2:	4b3f      	ldr	r3, [pc, #252]	; (8001af0 <HAL_RCC_ClockConfig+0x1bc>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d109      	bne.n	8001a12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e06f      	b.n	8001ae2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a02:	4b3b      	ldr	r3, [pc, #236]	; (8001af0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 0302 	and.w	r3, r3, #2
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d101      	bne.n	8001a12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e067      	b.n	8001ae2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a12:	4b37      	ldr	r3, [pc, #220]	; (8001af0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a14:	689b      	ldr	r3, [r3, #8]
 8001a16:	f023 0203 	bic.w	r2, r3, #3
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	4934      	ldr	r1, [pc, #208]	; (8001af0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a20:	4313      	orrs	r3, r2
 8001a22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a24:	f7ff fa28 	bl	8000e78 <HAL_GetTick>
 8001a28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a2a:	e00a      	b.n	8001a42 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a2c:	f7ff fa24 	bl	8000e78 <HAL_GetTick>
 8001a30:	4602      	mov	r2, r0
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d901      	bls.n	8001a42 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a3e:	2303      	movs	r3, #3
 8001a40:	e04f      	b.n	8001ae2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a42:	4b2b      	ldr	r3, [pc, #172]	; (8001af0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	f003 020c 	and.w	r2, r3, #12
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	429a      	cmp	r2, r3
 8001a52:	d1eb      	bne.n	8001a2c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a54:	4b25      	ldr	r3, [pc, #148]	; (8001aec <HAL_RCC_ClockConfig+0x1b8>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f003 0307 	and.w	r3, r3, #7
 8001a5c:	683a      	ldr	r2, [r7, #0]
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	d20c      	bcs.n	8001a7c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a62:	4b22      	ldr	r3, [pc, #136]	; (8001aec <HAL_RCC_ClockConfig+0x1b8>)
 8001a64:	683a      	ldr	r2, [r7, #0]
 8001a66:	b2d2      	uxtb	r2, r2
 8001a68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a6a:	4b20      	ldr	r3, [pc, #128]	; (8001aec <HAL_RCC_ClockConfig+0x1b8>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 0307 	and.w	r3, r3, #7
 8001a72:	683a      	ldr	r2, [r7, #0]
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d001      	beq.n	8001a7c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e032      	b.n	8001ae2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f003 0304 	and.w	r3, r3, #4
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d008      	beq.n	8001a9a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a88:	4b19      	ldr	r3, [pc, #100]	; (8001af0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	68db      	ldr	r3, [r3, #12]
 8001a94:	4916      	ldr	r1, [pc, #88]	; (8001af0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a96:	4313      	orrs	r3, r2
 8001a98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 0308 	and.w	r3, r3, #8
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d009      	beq.n	8001aba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001aa6:	4b12      	ldr	r3, [pc, #72]	; (8001af0 <HAL_RCC_ClockConfig+0x1bc>)
 8001aa8:	689b      	ldr	r3, [r3, #8]
 8001aaa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	691b      	ldr	r3, [r3, #16]
 8001ab2:	00db      	lsls	r3, r3, #3
 8001ab4:	490e      	ldr	r1, [pc, #56]	; (8001af0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001aba:	f000 f821 	bl	8001b00 <HAL_RCC_GetSysClockFreq>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	4b0b      	ldr	r3, [pc, #44]	; (8001af0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	091b      	lsrs	r3, r3, #4
 8001ac6:	f003 030f 	and.w	r3, r3, #15
 8001aca:	490a      	ldr	r1, [pc, #40]	; (8001af4 <HAL_RCC_ClockConfig+0x1c0>)
 8001acc:	5ccb      	ldrb	r3, [r1, r3]
 8001ace:	fa22 f303 	lsr.w	r3, r2, r3
 8001ad2:	4a09      	ldr	r2, [pc, #36]	; (8001af8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ad4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001ad6:	4b09      	ldr	r3, [pc, #36]	; (8001afc <HAL_RCC_ClockConfig+0x1c8>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4618      	mov	r0, r3
 8001adc:	f7ff f988 	bl	8000df0 <HAL_InitTick>

  return HAL_OK;
 8001ae0:	2300      	movs	r3, #0
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3710      	adds	r7, #16
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	40023c00 	.word	0x40023c00
 8001af0:	40023800 	.word	0x40023800
 8001af4:	0800285c 	.word	0x0800285c
 8001af8:	20000008 	.word	0x20000008
 8001afc:	2000000c 	.word	0x2000000c

08001b00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b04:	b090      	sub	sp, #64	; 0x40
 8001b06:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	637b      	str	r3, [r7, #52]	; 0x34
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001b10:	2300      	movs	r3, #0
 8001b12:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001b14:	2300      	movs	r3, #0
 8001b16:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b18:	4b59      	ldr	r3, [pc, #356]	; (8001c80 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	f003 030c 	and.w	r3, r3, #12
 8001b20:	2b08      	cmp	r3, #8
 8001b22:	d00d      	beq.n	8001b40 <HAL_RCC_GetSysClockFreq+0x40>
 8001b24:	2b08      	cmp	r3, #8
 8001b26:	f200 80a1 	bhi.w	8001c6c <HAL_RCC_GetSysClockFreq+0x16c>
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d002      	beq.n	8001b34 <HAL_RCC_GetSysClockFreq+0x34>
 8001b2e:	2b04      	cmp	r3, #4
 8001b30:	d003      	beq.n	8001b3a <HAL_RCC_GetSysClockFreq+0x3a>
 8001b32:	e09b      	b.n	8001c6c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b34:	4b53      	ldr	r3, [pc, #332]	; (8001c84 <HAL_RCC_GetSysClockFreq+0x184>)
 8001b36:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001b38:	e09b      	b.n	8001c72 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b3a:	4b53      	ldr	r3, [pc, #332]	; (8001c88 <HAL_RCC_GetSysClockFreq+0x188>)
 8001b3c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001b3e:	e098      	b.n	8001c72 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b40:	4b4f      	ldr	r3, [pc, #316]	; (8001c80 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b48:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b4a:	4b4d      	ldr	r3, [pc, #308]	; (8001c80 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d028      	beq.n	8001ba8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b56:	4b4a      	ldr	r3, [pc, #296]	; (8001c80 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	099b      	lsrs	r3, r3, #6
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	623b      	str	r3, [r7, #32]
 8001b60:	627a      	str	r2, [r7, #36]	; 0x24
 8001b62:	6a3b      	ldr	r3, [r7, #32]
 8001b64:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001b68:	2100      	movs	r1, #0
 8001b6a:	4b47      	ldr	r3, [pc, #284]	; (8001c88 <HAL_RCC_GetSysClockFreq+0x188>)
 8001b6c:	fb03 f201 	mul.w	r2, r3, r1
 8001b70:	2300      	movs	r3, #0
 8001b72:	fb00 f303 	mul.w	r3, r0, r3
 8001b76:	4413      	add	r3, r2
 8001b78:	4a43      	ldr	r2, [pc, #268]	; (8001c88 <HAL_RCC_GetSysClockFreq+0x188>)
 8001b7a:	fba0 1202 	umull	r1, r2, r0, r2
 8001b7e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001b80:	460a      	mov	r2, r1
 8001b82:	62ba      	str	r2, [r7, #40]	; 0x28
 8001b84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b86:	4413      	add	r3, r2
 8001b88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	61bb      	str	r3, [r7, #24]
 8001b90:	61fa      	str	r2, [r7, #28]
 8001b92:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b96:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001b9a:	f7fe fb15 	bl	80001c8 <__aeabi_uldivmod>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	460b      	mov	r3, r1
 8001ba2:	4613      	mov	r3, r2
 8001ba4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ba6:	e053      	b.n	8001c50 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ba8:	4b35      	ldr	r3, [pc, #212]	; (8001c80 <HAL_RCC_GetSysClockFreq+0x180>)
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	099b      	lsrs	r3, r3, #6
 8001bae:	2200      	movs	r2, #0
 8001bb0:	613b      	str	r3, [r7, #16]
 8001bb2:	617a      	str	r2, [r7, #20]
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001bba:	f04f 0b00 	mov.w	fp, #0
 8001bbe:	4652      	mov	r2, sl
 8001bc0:	465b      	mov	r3, fp
 8001bc2:	f04f 0000 	mov.w	r0, #0
 8001bc6:	f04f 0100 	mov.w	r1, #0
 8001bca:	0159      	lsls	r1, r3, #5
 8001bcc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001bd0:	0150      	lsls	r0, r2, #5
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	460b      	mov	r3, r1
 8001bd6:	ebb2 080a 	subs.w	r8, r2, sl
 8001bda:	eb63 090b 	sbc.w	r9, r3, fp
 8001bde:	f04f 0200 	mov.w	r2, #0
 8001be2:	f04f 0300 	mov.w	r3, #0
 8001be6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001bea:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001bee:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001bf2:	ebb2 0408 	subs.w	r4, r2, r8
 8001bf6:	eb63 0509 	sbc.w	r5, r3, r9
 8001bfa:	f04f 0200 	mov.w	r2, #0
 8001bfe:	f04f 0300 	mov.w	r3, #0
 8001c02:	00eb      	lsls	r3, r5, #3
 8001c04:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c08:	00e2      	lsls	r2, r4, #3
 8001c0a:	4614      	mov	r4, r2
 8001c0c:	461d      	mov	r5, r3
 8001c0e:	eb14 030a 	adds.w	r3, r4, sl
 8001c12:	603b      	str	r3, [r7, #0]
 8001c14:	eb45 030b 	adc.w	r3, r5, fp
 8001c18:	607b      	str	r3, [r7, #4]
 8001c1a:	f04f 0200 	mov.w	r2, #0
 8001c1e:	f04f 0300 	mov.w	r3, #0
 8001c22:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c26:	4629      	mov	r1, r5
 8001c28:	028b      	lsls	r3, r1, #10
 8001c2a:	4621      	mov	r1, r4
 8001c2c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c30:	4621      	mov	r1, r4
 8001c32:	028a      	lsls	r2, r1, #10
 8001c34:	4610      	mov	r0, r2
 8001c36:	4619      	mov	r1, r3
 8001c38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	60bb      	str	r3, [r7, #8]
 8001c3e:	60fa      	str	r2, [r7, #12]
 8001c40:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001c44:	f7fe fac0 	bl	80001c8 <__aeabi_uldivmod>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	460b      	mov	r3, r1
 8001c4c:	4613      	mov	r3, r2
 8001c4e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001c50:	4b0b      	ldr	r3, [pc, #44]	; (8001c80 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	0c1b      	lsrs	r3, r3, #16
 8001c56:	f003 0303 	and.w	r3, r3, #3
 8001c5a:	3301      	adds	r3, #1
 8001c5c:	005b      	lsls	r3, r3, #1
 8001c5e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001c60:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c64:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c68:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001c6a:	e002      	b.n	8001c72 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c6c:	4b05      	ldr	r3, [pc, #20]	; (8001c84 <HAL_RCC_GetSysClockFreq+0x184>)
 8001c6e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001c70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	3740      	adds	r7, #64	; 0x40
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c7e:	bf00      	nop
 8001c80:	40023800 	.word	0x40023800
 8001c84:	00f42400 	.word	0x00f42400
 8001c88:	017d7840 	.word	0x017d7840

08001c8c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d101      	bne.n	8001c9e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e07b      	b.n	8001d96 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d108      	bne.n	8001cb8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001cae:	d009      	beq.n	8001cc4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	61da      	str	r2, [r3, #28]
 8001cb6:	e005      	b.n	8001cc4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2200      	movs	r2, #0
 8001cbc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001cd0:	b2db      	uxtb	r3, r3
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d106      	bne.n	8001ce4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001cde:	6878      	ldr	r0, [r7, #4]
 8001ce0:	f7fe ffb6 	bl	8000c50 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2202      	movs	r2, #2
 8001ce8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001cfa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001d0c:	431a      	orrs	r2, r3
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	68db      	ldr	r3, [r3, #12]
 8001d12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d16:	431a      	orrs	r2, r3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	691b      	ldr	r3, [r3, #16]
 8001d1c:	f003 0302 	and.w	r3, r3, #2
 8001d20:	431a      	orrs	r2, r3
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	695b      	ldr	r3, [r3, #20]
 8001d26:	f003 0301 	and.w	r3, r3, #1
 8001d2a:	431a      	orrs	r2, r3
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	699b      	ldr	r3, [r3, #24]
 8001d30:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d34:	431a      	orrs	r2, r3
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	69db      	ldr	r3, [r3, #28]
 8001d3a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001d3e:	431a      	orrs	r2, r3
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6a1b      	ldr	r3, [r3, #32]
 8001d44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d48:	ea42 0103 	orr.w	r1, r2, r3
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d50:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	430a      	orrs	r2, r1
 8001d5a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	699b      	ldr	r3, [r3, #24]
 8001d60:	0c1b      	lsrs	r3, r3, #16
 8001d62:	f003 0104 	and.w	r1, r3, #4
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d6a:	f003 0210 	and.w	r2, r3, #16
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	430a      	orrs	r2, r1
 8001d74:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	69da      	ldr	r2, [r3, #28]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d84:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2201      	movs	r2, #1
 8001d90:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001d94:	2300      	movs	r3, #0
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3708      	adds	r7, #8
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}

08001d9e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d9e:	b580      	push	{r7, lr}
 8001da0:	b088      	sub	sp, #32
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	60f8      	str	r0, [r7, #12]
 8001da6:	60b9      	str	r1, [r7, #8]
 8001da8:	603b      	str	r3, [r7, #0]
 8001daa:	4613      	mov	r3, r2
 8001dac:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001dae:	2300      	movs	r3, #0
 8001db0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d101      	bne.n	8001dc0 <HAL_SPI_Transmit+0x22>
 8001dbc:	2302      	movs	r3, #2
 8001dbe:	e126      	b.n	800200e <HAL_SPI_Transmit+0x270>
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001dc8:	f7ff f856 	bl	8000e78 <HAL_GetTick>
 8001dcc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001dce:	88fb      	ldrh	r3, [r7, #6]
 8001dd0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	d002      	beq.n	8001de4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001dde:	2302      	movs	r3, #2
 8001de0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001de2:	e10b      	b.n	8001ffc <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d002      	beq.n	8001df0 <HAL_SPI_Transmit+0x52>
 8001dea:	88fb      	ldrh	r3, [r7, #6]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d102      	bne.n	8001df6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001df4:	e102      	b.n	8001ffc <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	2203      	movs	r2, #3
 8001dfa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	2200      	movs	r2, #0
 8001e02:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	68ba      	ldr	r2, [r7, #8]
 8001e08:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	88fa      	ldrh	r2, [r7, #6]
 8001e0e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	88fa      	ldrh	r2, [r7, #6]
 8001e14:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	2200      	movs	r2, #0
 8001e1a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	2200      	movs	r2, #0
 8001e26:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	2200      	movs	r2, #0
 8001e32:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e3c:	d10f      	bne.n	8001e5e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e4c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001e5c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e68:	2b40      	cmp	r3, #64	; 0x40
 8001e6a:	d007      	beq.n	8001e7c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001e7a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001e84:	d14b      	bne.n	8001f1e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d002      	beq.n	8001e94 <HAL_SPI_Transmit+0xf6>
 8001e8e:	8afb      	ldrh	r3, [r7, #22]
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	d13e      	bne.n	8001f12 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e98:	881a      	ldrh	r2, [r3, #0]
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea4:	1c9a      	adds	r2, r3, #2
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001eae:	b29b      	uxth	r3, r3
 8001eb0:	3b01      	subs	r3, #1
 8001eb2:	b29a      	uxth	r2, r3
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001eb8:	e02b      	b.n	8001f12 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	f003 0302 	and.w	r3, r3, #2
 8001ec4:	2b02      	cmp	r3, #2
 8001ec6:	d112      	bne.n	8001eee <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ecc:	881a      	ldrh	r2, [r3, #0]
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed8:	1c9a      	adds	r2, r3, #2
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ee2:	b29b      	uxth	r3, r3
 8001ee4:	3b01      	subs	r3, #1
 8001ee6:	b29a      	uxth	r2, r3
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	86da      	strh	r2, [r3, #54]	; 0x36
 8001eec:	e011      	b.n	8001f12 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001eee:	f7fe ffc3 	bl	8000e78 <HAL_GetTick>
 8001ef2:	4602      	mov	r2, r0
 8001ef4:	69bb      	ldr	r3, [r7, #24]
 8001ef6:	1ad3      	subs	r3, r2, r3
 8001ef8:	683a      	ldr	r2, [r7, #0]
 8001efa:	429a      	cmp	r2, r3
 8001efc:	d803      	bhi.n	8001f06 <HAL_SPI_Transmit+0x168>
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f04:	d102      	bne.n	8001f0c <HAL_SPI_Transmit+0x16e>
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d102      	bne.n	8001f12 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8001f0c:	2303      	movs	r3, #3
 8001f0e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001f10:	e074      	b.n	8001ffc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f16:	b29b      	uxth	r3, r3
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d1ce      	bne.n	8001eba <HAL_SPI_Transmit+0x11c>
 8001f1c:	e04c      	b.n	8001fb8 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d002      	beq.n	8001f2c <HAL_SPI_Transmit+0x18e>
 8001f26:	8afb      	ldrh	r3, [r7, #22]
 8001f28:	2b01      	cmp	r3, #1
 8001f2a:	d140      	bne.n	8001fae <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	330c      	adds	r3, #12
 8001f36:	7812      	ldrb	r2, [r2, #0]
 8001f38:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3e:	1c5a      	adds	r2, r3, #1
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f48:	b29b      	uxth	r3, r3
 8001f4a:	3b01      	subs	r3, #1
 8001f4c:	b29a      	uxth	r2, r3
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001f52:	e02c      	b.n	8001fae <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	f003 0302 	and.w	r3, r3, #2
 8001f5e:	2b02      	cmp	r3, #2
 8001f60:	d113      	bne.n	8001f8a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	330c      	adds	r3, #12
 8001f6c:	7812      	ldrb	r2, [r2, #0]
 8001f6e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f74:	1c5a      	adds	r2, r3, #1
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f7e:	b29b      	uxth	r3, r3
 8001f80:	3b01      	subs	r3, #1
 8001f82:	b29a      	uxth	r2, r3
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	86da      	strh	r2, [r3, #54]	; 0x36
 8001f88:	e011      	b.n	8001fae <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001f8a:	f7fe ff75 	bl	8000e78 <HAL_GetTick>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	69bb      	ldr	r3, [r7, #24]
 8001f92:	1ad3      	subs	r3, r2, r3
 8001f94:	683a      	ldr	r2, [r7, #0]
 8001f96:	429a      	cmp	r2, r3
 8001f98:	d803      	bhi.n	8001fa2 <HAL_SPI_Transmit+0x204>
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001fa0:	d102      	bne.n	8001fa8 <HAL_SPI_Transmit+0x20a>
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d102      	bne.n	8001fae <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8001fa8:	2303      	movs	r3, #3
 8001faa:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001fac:	e026      	b.n	8001ffc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001fb2:	b29b      	uxth	r3, r3
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d1cd      	bne.n	8001f54 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001fb8:	69ba      	ldr	r2, [r7, #24]
 8001fba:	6839      	ldr	r1, [r7, #0]
 8001fbc:	68f8      	ldr	r0, [r7, #12]
 8001fbe:	f000 fbcb 	bl	8002758 <SPI_EndRxTxTransaction>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d002      	beq.n	8001fce <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	2220      	movs	r2, #32
 8001fcc:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d10a      	bne.n	8001fec <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	613b      	str	r3, [r7, #16]
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	613b      	str	r3, [r7, #16]
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	613b      	str	r3, [r7, #16]
 8001fea:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d002      	beq.n	8001ffa <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	77fb      	strb	r3, [r7, #31]
 8001ff8:	e000      	b.n	8001ffc <HAL_SPI_Transmit+0x25e>
  }

error:
 8001ffa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	2201      	movs	r2, #1
 8002000:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	2200      	movs	r2, #0
 8002008:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800200c:	7ffb      	ldrb	r3, [r7, #31]
}
 800200e:	4618      	mov	r0, r3
 8002010:	3720      	adds	r7, #32
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}

08002016 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002016:	b580      	push	{r7, lr}
 8002018:	b088      	sub	sp, #32
 800201a:	af02      	add	r7, sp, #8
 800201c:	60f8      	str	r0, [r7, #12]
 800201e:	60b9      	str	r1, [r7, #8]
 8002020:	603b      	str	r3, [r7, #0]
 8002022:	4613      	mov	r3, r2
 8002024:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002026:	2300      	movs	r3, #0
 8002028:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002032:	d112      	bne.n	800205a <HAL_SPI_Receive+0x44>
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d10e      	bne.n	800205a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	2204      	movs	r2, #4
 8002040:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002044:	88fa      	ldrh	r2, [r7, #6]
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	9300      	str	r3, [sp, #0]
 800204a:	4613      	mov	r3, r2
 800204c:	68ba      	ldr	r2, [r7, #8]
 800204e:	68b9      	ldr	r1, [r7, #8]
 8002050:	68f8      	ldr	r0, [r7, #12]
 8002052:	f000 f8f1 	bl	8002238 <HAL_SPI_TransmitReceive>
 8002056:	4603      	mov	r3, r0
 8002058:	e0ea      	b.n	8002230 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002060:	2b01      	cmp	r3, #1
 8002062:	d101      	bne.n	8002068 <HAL_SPI_Receive+0x52>
 8002064:	2302      	movs	r3, #2
 8002066:	e0e3      	b.n	8002230 <HAL_SPI_Receive+0x21a>
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	2201      	movs	r2, #1
 800206c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002070:	f7fe ff02 	bl	8000e78 <HAL_GetTick>
 8002074:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800207c:	b2db      	uxtb	r3, r3
 800207e:	2b01      	cmp	r3, #1
 8002080:	d002      	beq.n	8002088 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002082:	2302      	movs	r3, #2
 8002084:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002086:	e0ca      	b.n	800221e <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d002      	beq.n	8002094 <HAL_SPI_Receive+0x7e>
 800208e:	88fb      	ldrh	r3, [r7, #6]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d102      	bne.n	800209a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002098:	e0c1      	b.n	800221e <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	2204      	movs	r2, #4
 800209e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	2200      	movs	r2, #0
 80020a6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	68ba      	ldr	r2, [r7, #8]
 80020ac:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	88fa      	ldrh	r2, [r7, #6]
 80020b2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	88fa      	ldrh	r2, [r7, #6]
 80020b8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	2200      	movs	r2, #0
 80020be:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	2200      	movs	r2, #0
 80020c4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	2200      	movs	r2, #0
 80020ca:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	2200      	movs	r2, #0
 80020d0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	2200      	movs	r2, #0
 80020d6:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80020e0:	d10f      	bne.n	8002102 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80020f0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002100:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800210c:	2b40      	cmp	r3, #64	; 0x40
 800210e:	d007      	beq.n	8002120 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800211e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d162      	bne.n	80021ee <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002128:	e02e      	b.n	8002188 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	f003 0301 	and.w	r3, r3, #1
 8002134:	2b01      	cmp	r3, #1
 8002136:	d115      	bne.n	8002164 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f103 020c 	add.w	r2, r3, #12
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002144:	7812      	ldrb	r2, [r2, #0]
 8002146:	b2d2      	uxtb	r2, r2
 8002148:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800214e:	1c5a      	adds	r2, r3, #1
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002158:	b29b      	uxth	r3, r3
 800215a:	3b01      	subs	r3, #1
 800215c:	b29a      	uxth	r2, r3
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002162:	e011      	b.n	8002188 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002164:	f7fe fe88 	bl	8000e78 <HAL_GetTick>
 8002168:	4602      	mov	r2, r0
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	683a      	ldr	r2, [r7, #0]
 8002170:	429a      	cmp	r2, r3
 8002172:	d803      	bhi.n	800217c <HAL_SPI_Receive+0x166>
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800217a:	d102      	bne.n	8002182 <HAL_SPI_Receive+0x16c>
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d102      	bne.n	8002188 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8002182:	2303      	movs	r3, #3
 8002184:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002186:	e04a      	b.n	800221e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800218c:	b29b      	uxth	r3, r3
 800218e:	2b00      	cmp	r3, #0
 8002190:	d1cb      	bne.n	800212a <HAL_SPI_Receive+0x114>
 8002192:	e031      	b.n	80021f8 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	689b      	ldr	r3, [r3, #8]
 800219a:	f003 0301 	and.w	r3, r3, #1
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d113      	bne.n	80021ca <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	68da      	ldr	r2, [r3, #12]
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021ac:	b292      	uxth	r2, r2
 80021ae:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021b4:	1c9a      	adds	r2, r3, #2
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80021be:	b29b      	uxth	r3, r3
 80021c0:	3b01      	subs	r3, #1
 80021c2:	b29a      	uxth	r2, r3
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80021c8:	e011      	b.n	80021ee <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80021ca:	f7fe fe55 	bl	8000e78 <HAL_GetTick>
 80021ce:	4602      	mov	r2, r0
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	1ad3      	subs	r3, r2, r3
 80021d4:	683a      	ldr	r2, [r7, #0]
 80021d6:	429a      	cmp	r2, r3
 80021d8:	d803      	bhi.n	80021e2 <HAL_SPI_Receive+0x1cc>
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80021e0:	d102      	bne.n	80021e8 <HAL_SPI_Receive+0x1d2>
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d102      	bne.n	80021ee <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80021e8:	2303      	movs	r3, #3
 80021ea:	75fb      	strb	r3, [r7, #23]
          goto error;
 80021ec:	e017      	b.n	800221e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80021f2:	b29b      	uxth	r3, r3
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d1cd      	bne.n	8002194 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80021f8:	693a      	ldr	r2, [r7, #16]
 80021fa:	6839      	ldr	r1, [r7, #0]
 80021fc:	68f8      	ldr	r0, [r7, #12]
 80021fe:	f000 fa45 	bl	800268c <SPI_EndRxTransaction>
 8002202:	4603      	mov	r3, r0
 8002204:	2b00      	cmp	r3, #0
 8002206:	d002      	beq.n	800220e <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	2220      	movs	r2, #32
 800220c:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002212:	2b00      	cmp	r3, #0
 8002214:	d002      	beq.n	800221c <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	75fb      	strb	r3, [r7, #23]
 800221a:	e000      	b.n	800221e <HAL_SPI_Receive+0x208>
  }

error :
 800221c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	2201      	movs	r2, #1
 8002222:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	2200      	movs	r2, #0
 800222a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800222e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002230:	4618      	mov	r0, r3
 8002232:	3718      	adds	r7, #24
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}

08002238 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b08c      	sub	sp, #48	; 0x30
 800223c:	af00      	add	r7, sp, #0
 800223e:	60f8      	str	r0, [r7, #12]
 8002240:	60b9      	str	r1, [r7, #8]
 8002242:	607a      	str	r2, [r7, #4]
 8002244:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002246:	2301      	movs	r3, #1
 8002248:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800224a:	2300      	movs	r3, #0
 800224c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002256:	2b01      	cmp	r3, #1
 8002258:	d101      	bne.n	800225e <HAL_SPI_TransmitReceive+0x26>
 800225a:	2302      	movs	r3, #2
 800225c:	e18a      	b.n	8002574 <HAL_SPI_TransmitReceive+0x33c>
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	2201      	movs	r2, #1
 8002262:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002266:	f7fe fe07 	bl	8000e78 <HAL_GetTick>
 800226a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002272:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800227c:	887b      	ldrh	r3, [r7, #2]
 800227e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002280:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002284:	2b01      	cmp	r3, #1
 8002286:	d00f      	beq.n	80022a8 <HAL_SPI_TransmitReceive+0x70>
 8002288:	69fb      	ldr	r3, [r7, #28]
 800228a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800228e:	d107      	bne.n	80022a0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d103      	bne.n	80022a0 <HAL_SPI_TransmitReceive+0x68>
 8002298:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800229c:	2b04      	cmp	r3, #4
 800229e:	d003      	beq.n	80022a8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80022a0:	2302      	movs	r3, #2
 80022a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80022a6:	e15b      	b.n	8002560 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d005      	beq.n	80022ba <HAL_SPI_TransmitReceive+0x82>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d002      	beq.n	80022ba <HAL_SPI_TransmitReceive+0x82>
 80022b4:	887b      	ldrh	r3, [r7, #2]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d103      	bne.n	80022c2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80022c0:	e14e      	b.n	8002560 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	2b04      	cmp	r3, #4
 80022cc:	d003      	beq.n	80022d6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2205      	movs	r2, #5
 80022d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	2200      	movs	r2, #0
 80022da:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	687a      	ldr	r2, [r7, #4]
 80022e0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	887a      	ldrh	r2, [r7, #2]
 80022e6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	887a      	ldrh	r2, [r7, #2]
 80022ec:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	68ba      	ldr	r2, [r7, #8]
 80022f2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	887a      	ldrh	r2, [r7, #2]
 80022f8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	887a      	ldrh	r2, [r7, #2]
 80022fe:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	2200      	movs	r2, #0
 8002304:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	2200      	movs	r2, #0
 800230a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002316:	2b40      	cmp	r3, #64	; 0x40
 8002318:	d007      	beq.n	800232a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002328:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	68db      	ldr	r3, [r3, #12]
 800232e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002332:	d178      	bne.n	8002426 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d002      	beq.n	8002342 <HAL_SPI_TransmitReceive+0x10a>
 800233c:	8b7b      	ldrh	r3, [r7, #26]
 800233e:	2b01      	cmp	r3, #1
 8002340:	d166      	bne.n	8002410 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002346:	881a      	ldrh	r2, [r3, #0]
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002352:	1c9a      	adds	r2, r3, #2
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800235c:	b29b      	uxth	r3, r3
 800235e:	3b01      	subs	r3, #1
 8002360:	b29a      	uxth	r2, r3
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002366:	e053      	b.n	8002410 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	f003 0302 	and.w	r3, r3, #2
 8002372:	2b02      	cmp	r3, #2
 8002374:	d11b      	bne.n	80023ae <HAL_SPI_TransmitReceive+0x176>
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800237a:	b29b      	uxth	r3, r3
 800237c:	2b00      	cmp	r3, #0
 800237e:	d016      	beq.n	80023ae <HAL_SPI_TransmitReceive+0x176>
 8002380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002382:	2b01      	cmp	r3, #1
 8002384:	d113      	bne.n	80023ae <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800238a:	881a      	ldrh	r2, [r3, #0]
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002396:	1c9a      	adds	r2, r3, #2
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023a0:	b29b      	uxth	r3, r3
 80023a2:	3b01      	subs	r3, #1
 80023a4:	b29a      	uxth	r2, r3
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80023aa:	2300      	movs	r3, #0
 80023ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	f003 0301 	and.w	r3, r3, #1
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	d119      	bne.n	80023f0 <HAL_SPI_TransmitReceive+0x1b8>
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023c0:	b29b      	uxth	r3, r3
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d014      	beq.n	80023f0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	68da      	ldr	r2, [r3, #12]
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023d0:	b292      	uxth	r2, r2
 80023d2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023d8:	1c9a      	adds	r2, r3, #2
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023e2:	b29b      	uxth	r3, r3
 80023e4:	3b01      	subs	r3, #1
 80023e6:	b29a      	uxth	r2, r3
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80023ec:	2301      	movs	r3, #1
 80023ee:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80023f0:	f7fe fd42 	bl	8000e78 <HAL_GetTick>
 80023f4:	4602      	mov	r2, r0
 80023f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d807      	bhi.n	8002410 <HAL_SPI_TransmitReceive+0x1d8>
 8002400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002402:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002406:	d003      	beq.n	8002410 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002408:	2303      	movs	r3, #3
 800240a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800240e:	e0a7      	b.n	8002560 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002414:	b29b      	uxth	r3, r3
 8002416:	2b00      	cmp	r3, #0
 8002418:	d1a6      	bne.n	8002368 <HAL_SPI_TransmitReceive+0x130>
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800241e:	b29b      	uxth	r3, r3
 8002420:	2b00      	cmp	r3, #0
 8002422:	d1a1      	bne.n	8002368 <HAL_SPI_TransmitReceive+0x130>
 8002424:	e07c      	b.n	8002520 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d002      	beq.n	8002434 <HAL_SPI_TransmitReceive+0x1fc>
 800242e:	8b7b      	ldrh	r3, [r7, #26]
 8002430:	2b01      	cmp	r3, #1
 8002432:	d16b      	bne.n	800250c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	330c      	adds	r3, #12
 800243e:	7812      	ldrb	r2, [r2, #0]
 8002440:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002446:	1c5a      	adds	r2, r3, #1
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002450:	b29b      	uxth	r3, r3
 8002452:	3b01      	subs	r3, #1
 8002454:	b29a      	uxth	r2, r3
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800245a:	e057      	b.n	800250c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	f003 0302 	and.w	r3, r3, #2
 8002466:	2b02      	cmp	r3, #2
 8002468:	d11c      	bne.n	80024a4 <HAL_SPI_TransmitReceive+0x26c>
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800246e:	b29b      	uxth	r3, r3
 8002470:	2b00      	cmp	r3, #0
 8002472:	d017      	beq.n	80024a4 <HAL_SPI_TransmitReceive+0x26c>
 8002474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002476:	2b01      	cmp	r3, #1
 8002478:	d114      	bne.n	80024a4 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	330c      	adds	r3, #12
 8002484:	7812      	ldrb	r2, [r2, #0]
 8002486:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248c:	1c5a      	adds	r2, r3, #1
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002496:	b29b      	uxth	r3, r3
 8002498:	3b01      	subs	r3, #1
 800249a:	b29a      	uxth	r2, r3
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80024a0:	2300      	movs	r3, #0
 80024a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	f003 0301 	and.w	r3, r3, #1
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	d119      	bne.n	80024e6 <HAL_SPI_TransmitReceive+0x2ae>
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024b6:	b29b      	uxth	r3, r3
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d014      	beq.n	80024e6 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	68da      	ldr	r2, [r3, #12]
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024c6:	b2d2      	uxtb	r2, r2
 80024c8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024ce:	1c5a      	adds	r2, r3, #1
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024d8:	b29b      	uxth	r3, r3
 80024da:	3b01      	subs	r3, #1
 80024dc:	b29a      	uxth	r2, r3
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80024e2:	2301      	movs	r3, #1
 80024e4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80024e6:	f7fe fcc7 	bl	8000e78 <HAL_GetTick>
 80024ea:	4602      	mov	r2, r0
 80024ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ee:	1ad3      	subs	r3, r2, r3
 80024f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d803      	bhi.n	80024fe <HAL_SPI_TransmitReceive+0x2c6>
 80024f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80024fc:	d102      	bne.n	8002504 <HAL_SPI_TransmitReceive+0x2cc>
 80024fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002500:	2b00      	cmp	r3, #0
 8002502:	d103      	bne.n	800250c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002504:	2303      	movs	r3, #3
 8002506:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800250a:	e029      	b.n	8002560 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002510:	b29b      	uxth	r3, r3
 8002512:	2b00      	cmp	r3, #0
 8002514:	d1a2      	bne.n	800245c <HAL_SPI_TransmitReceive+0x224>
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800251a:	b29b      	uxth	r3, r3
 800251c:	2b00      	cmp	r3, #0
 800251e:	d19d      	bne.n	800245c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002520:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002522:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002524:	68f8      	ldr	r0, [r7, #12]
 8002526:	f000 f917 	bl	8002758 <SPI_EndRxTxTransaction>
 800252a:	4603      	mov	r3, r0
 800252c:	2b00      	cmp	r3, #0
 800252e:	d006      	beq.n	800253e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	2220      	movs	r2, #32
 800253a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800253c:	e010      	b.n	8002560 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d10b      	bne.n	800255e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002546:	2300      	movs	r3, #0
 8002548:	617b      	str	r3, [r7, #20]
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	617b      	str	r3, [r7, #20]
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	617b      	str	r3, [r7, #20]
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	e000      	b.n	8002560 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800255e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	2201      	movs	r2, #1
 8002564:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	2200      	movs	r2, #0
 800256c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002570:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002574:	4618      	mov	r0, r3
 8002576:	3730      	adds	r7, #48	; 0x30
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}

0800257c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b088      	sub	sp, #32
 8002580:	af00      	add	r7, sp, #0
 8002582:	60f8      	str	r0, [r7, #12]
 8002584:	60b9      	str	r1, [r7, #8]
 8002586:	603b      	str	r3, [r7, #0]
 8002588:	4613      	mov	r3, r2
 800258a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800258c:	f7fe fc74 	bl	8000e78 <HAL_GetTick>
 8002590:	4602      	mov	r2, r0
 8002592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002594:	1a9b      	subs	r3, r3, r2
 8002596:	683a      	ldr	r2, [r7, #0]
 8002598:	4413      	add	r3, r2
 800259a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800259c:	f7fe fc6c 	bl	8000e78 <HAL_GetTick>
 80025a0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80025a2:	4b39      	ldr	r3, [pc, #228]	; (8002688 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	015b      	lsls	r3, r3, #5
 80025a8:	0d1b      	lsrs	r3, r3, #20
 80025aa:	69fa      	ldr	r2, [r7, #28]
 80025ac:	fb02 f303 	mul.w	r3, r2, r3
 80025b0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80025b2:	e054      	b.n	800265e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80025ba:	d050      	beq.n	800265e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80025bc:	f7fe fc5c 	bl	8000e78 <HAL_GetTick>
 80025c0:	4602      	mov	r2, r0
 80025c2:	69bb      	ldr	r3, [r7, #24]
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	69fa      	ldr	r2, [r7, #28]
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d902      	bls.n	80025d2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80025cc:	69fb      	ldr	r3, [r7, #28]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d13d      	bne.n	800264e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	685a      	ldr	r2, [r3, #4]
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80025e0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80025ea:	d111      	bne.n	8002610 <SPI_WaitFlagStateUntilTimeout+0x94>
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025f4:	d004      	beq.n	8002600 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025fe:	d107      	bne.n	8002610 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800260e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002614:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002618:	d10f      	bne.n	800263a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002628:	601a      	str	r2, [r3, #0]
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002638:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	2201      	movs	r2, #1
 800263e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2200      	movs	r2, #0
 8002646:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800264a:	2303      	movs	r3, #3
 800264c:	e017      	b.n	800267e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d101      	bne.n	8002658 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002654:	2300      	movs	r3, #0
 8002656:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	3b01      	subs	r3, #1
 800265c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	689a      	ldr	r2, [r3, #8]
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	4013      	ands	r3, r2
 8002668:	68ba      	ldr	r2, [r7, #8]
 800266a:	429a      	cmp	r2, r3
 800266c:	bf0c      	ite	eq
 800266e:	2301      	moveq	r3, #1
 8002670:	2300      	movne	r3, #0
 8002672:	b2db      	uxtb	r3, r3
 8002674:	461a      	mov	r2, r3
 8002676:	79fb      	ldrb	r3, [r7, #7]
 8002678:	429a      	cmp	r2, r3
 800267a:	d19b      	bne.n	80025b4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800267c:	2300      	movs	r3, #0
}
 800267e:	4618      	mov	r0, r3
 8002680:	3720      	adds	r7, #32
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	20000008 	.word	0x20000008

0800268c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b086      	sub	sp, #24
 8002690:	af02      	add	r7, sp, #8
 8002692:	60f8      	str	r0, [r7, #12]
 8002694:	60b9      	str	r1, [r7, #8]
 8002696:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80026a0:	d111      	bne.n	80026c6 <SPI_EndRxTransaction+0x3a>
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026aa:	d004      	beq.n	80026b6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026b4:	d107      	bne.n	80026c6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80026c4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80026ce:	d12a      	bne.n	8002726 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026d8:	d012      	beq.n	8002700 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	9300      	str	r3, [sp, #0]
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	2200      	movs	r2, #0
 80026e2:	2180      	movs	r1, #128	; 0x80
 80026e4:	68f8      	ldr	r0, [r7, #12]
 80026e6:	f7ff ff49 	bl	800257c <SPI_WaitFlagStateUntilTimeout>
 80026ea:	4603      	mov	r3, r0
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d02d      	beq.n	800274c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026f4:	f043 0220 	orr.w	r2, r3, #32
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80026fc:	2303      	movs	r3, #3
 80026fe:	e026      	b.n	800274e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	9300      	str	r3, [sp, #0]
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	2200      	movs	r2, #0
 8002708:	2101      	movs	r1, #1
 800270a:	68f8      	ldr	r0, [r7, #12]
 800270c:	f7ff ff36 	bl	800257c <SPI_WaitFlagStateUntilTimeout>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d01a      	beq.n	800274c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800271a:	f043 0220 	orr.w	r2, r3, #32
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002722:	2303      	movs	r3, #3
 8002724:	e013      	b.n	800274e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	9300      	str	r3, [sp, #0]
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	2200      	movs	r2, #0
 800272e:	2101      	movs	r1, #1
 8002730:	68f8      	ldr	r0, [r7, #12]
 8002732:	f7ff ff23 	bl	800257c <SPI_WaitFlagStateUntilTimeout>
 8002736:	4603      	mov	r3, r0
 8002738:	2b00      	cmp	r3, #0
 800273a:	d007      	beq.n	800274c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002740:	f043 0220 	orr.w	r2, r3, #32
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002748:	2303      	movs	r3, #3
 800274a:	e000      	b.n	800274e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800274c:	2300      	movs	r3, #0
}
 800274e:	4618      	mov	r0, r3
 8002750:	3710      	adds	r7, #16
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
	...

08002758 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b088      	sub	sp, #32
 800275c:	af02      	add	r7, sp, #8
 800275e:	60f8      	str	r0, [r7, #12]
 8002760:	60b9      	str	r1, [r7, #8]
 8002762:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002764:	4b1b      	ldr	r3, [pc, #108]	; (80027d4 <SPI_EndRxTxTransaction+0x7c>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a1b      	ldr	r2, [pc, #108]	; (80027d8 <SPI_EndRxTxTransaction+0x80>)
 800276a:	fba2 2303 	umull	r2, r3, r2, r3
 800276e:	0d5b      	lsrs	r3, r3, #21
 8002770:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002774:	fb02 f303 	mul.w	r3, r2, r3
 8002778:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002782:	d112      	bne.n	80027aa <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	9300      	str	r3, [sp, #0]
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	2200      	movs	r2, #0
 800278c:	2180      	movs	r1, #128	; 0x80
 800278e:	68f8      	ldr	r0, [r7, #12]
 8002790:	f7ff fef4 	bl	800257c <SPI_WaitFlagStateUntilTimeout>
 8002794:	4603      	mov	r3, r0
 8002796:	2b00      	cmp	r3, #0
 8002798:	d016      	beq.n	80027c8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800279e:	f043 0220 	orr.w	r2, r3, #32
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80027a6:	2303      	movs	r3, #3
 80027a8:	e00f      	b.n	80027ca <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d00a      	beq.n	80027c6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	3b01      	subs	r3, #1
 80027b4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027c0:	2b80      	cmp	r3, #128	; 0x80
 80027c2:	d0f2      	beq.n	80027aa <SPI_EndRxTxTransaction+0x52>
 80027c4:	e000      	b.n	80027c8 <SPI_EndRxTxTransaction+0x70>
        break;
 80027c6:	bf00      	nop
  }

  return HAL_OK;
 80027c8:	2300      	movs	r3, #0
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3718      	adds	r7, #24
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	bf00      	nop
 80027d4:	20000008 	.word	0x20000008
 80027d8:	165e9f81 	.word	0x165e9f81

080027dc <memset>:
 80027dc:	4402      	add	r2, r0
 80027de:	4603      	mov	r3, r0
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d100      	bne.n	80027e6 <memset+0xa>
 80027e4:	4770      	bx	lr
 80027e6:	f803 1b01 	strb.w	r1, [r3], #1
 80027ea:	e7f9      	b.n	80027e0 <memset+0x4>

080027ec <__libc_init_array>:
 80027ec:	b570      	push	{r4, r5, r6, lr}
 80027ee:	4d0d      	ldr	r5, [pc, #52]	; (8002824 <__libc_init_array+0x38>)
 80027f0:	4c0d      	ldr	r4, [pc, #52]	; (8002828 <__libc_init_array+0x3c>)
 80027f2:	1b64      	subs	r4, r4, r5
 80027f4:	10a4      	asrs	r4, r4, #2
 80027f6:	2600      	movs	r6, #0
 80027f8:	42a6      	cmp	r6, r4
 80027fa:	d109      	bne.n	8002810 <__libc_init_array+0x24>
 80027fc:	4d0b      	ldr	r5, [pc, #44]	; (800282c <__libc_init_array+0x40>)
 80027fe:	4c0c      	ldr	r4, [pc, #48]	; (8002830 <__libc_init_array+0x44>)
 8002800:	f000 f818 	bl	8002834 <_init>
 8002804:	1b64      	subs	r4, r4, r5
 8002806:	10a4      	asrs	r4, r4, #2
 8002808:	2600      	movs	r6, #0
 800280a:	42a6      	cmp	r6, r4
 800280c:	d105      	bne.n	800281a <__libc_init_array+0x2e>
 800280e:	bd70      	pop	{r4, r5, r6, pc}
 8002810:	f855 3b04 	ldr.w	r3, [r5], #4
 8002814:	4798      	blx	r3
 8002816:	3601      	adds	r6, #1
 8002818:	e7ee      	b.n	80027f8 <__libc_init_array+0xc>
 800281a:	f855 3b04 	ldr.w	r3, [r5], #4
 800281e:	4798      	blx	r3
 8002820:	3601      	adds	r6, #1
 8002822:	e7f2      	b.n	800280a <__libc_init_array+0x1e>
 8002824:	08002874 	.word	0x08002874
 8002828:	08002874 	.word	0x08002874
 800282c:	08002874 	.word	0x08002874
 8002830:	08002878 	.word	0x08002878

08002834 <_init>:
 8002834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002836:	bf00      	nop
 8002838:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800283a:	bc08      	pop	{r3}
 800283c:	469e      	mov	lr, r3
 800283e:	4770      	bx	lr

08002840 <_fini>:
 8002840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002842:	bf00      	nop
 8002844:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002846:	bc08      	pop	{r3}
 8002848:	469e      	mov	lr, r3
 800284a:	4770      	bx	lr
